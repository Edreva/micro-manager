///////////////////////////////////////////////////////////////////////////////
// AUTHOR:       Henry Pinkard, henry.pinkard@gmail.com
//
// COPYRIGHT:    University of California, San Francisco, 2015
//
// LICENSE:      This file is distributed under the BSD license.
//               License text is included with the source distribution.
//
//               This file is distributed in the hope that it will be useful,
//               but WITHOUT ANY WARRANTY; without even the implied warranty
//               of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
//
//               IN NO EVENT SHALL THE COPYRIGHT OWNER OR
//               CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
//               INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES.
//

package org.micromanager.magellan.internal.gui;

import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Cursor;
import java.awt.FileDialog;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.font.TextAttribute;
import java.io.File;
import java.io.IOException;
import java.util.LinkedList;
import java.util.Map;
import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.ButtonGroup;
import javax.swing.DefaultComboBoxModel;
import javax.swing.GroupLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JSpinner;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.LayoutStyle;
import javax.swing.ListSelectionModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import javax.swing.border.LineBorder;
import javax.swing.event.ChangeEvent;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import org.micromanager.Studio;
import org.micromanager.internal.utils.WindowPositioning;
import org.micromanager.magellan.internal.explore.gui.SimpleChannelTableModel;
import org.micromanager.magellan.internal.magellanacq.LoadedAcquisitionData;
import org.micromanager.magellan.internal.magellanacq.MagellanAcquisitionsManager;
import org.micromanager.magellan.internal.magellanacq.MagellanGUIAcquisitionSettings;
import org.micromanager.magellan.internal.main.Magellan;
import org.micromanager.magellan.internal.misc.GlobalSettings;
import org.micromanager.magellan.internal.misc.JavaUtils;
import org.micromanager.magellan.internal.misc.Log;
import org.micromanager.magellan.internal.surfacesandregions.SurfaceGridManager;

/**
 * Main GUI of the Magellan plugin.  Was generated by some kind of tool.
 *
 * @author Henry Pinkard
 */
public class GUI extends JFrame {

   private static final String PREF_SIZE_WIDTH = "Magellan gui size width";
   private static final String PREF_SIZE_HEIGHT = "Magellan gui size height";
   private static final Color DARK_GREEN = new Color(0, 128, 0);
   private static final Color LIGHT_GREEN = new Color(0, 200, 0);
   private static final Color DEFAULT_RADIO_BUTTON_TEXT_COLOR = new JRadioButton().getForeground();

   private static final String EXPLORE_NAME_PREF = "Explore acq name";
   private static final String EXPLORE_DIR_PREF = "Explore acq dir";
   private static final String EXPLORE_USE_Z = "Explore use Z";
   private static final String EXPLORE_Z_STEP = "Explore acq zStep";
   private static final String EXPLORE_TILE_OVERLAP = "Explore tile overlap";
   private final SurfaceGridManager manager_ = new SurfaceGridManager();
   private final MagellanAcquisitionsManager multiAcqManager_;
   private final GlobalSettings settings_;
   private boolean storeAcqSettings_ = true;
   private int multiAcqSelectedIndex_ = 0;
   private final LinkedList<JSpinner> offsetSpinners_ = new LinkedList<>();
   private static GUI singleton_;
   private volatile boolean acquisitionRunning_ = false;
   private final Studio studio_;

   /**
    * Constructor does the heavy lifting and creates the GUI.
    *
    * @param version version of the Magellan plugin.
    */
   public GUI(String version, Studio studio) {
      singleton_ = this;
      storeAcqSettings_ = false; // dont store during intialization
      settings_ = new GlobalSettings(studio.profile());
      studio_ = studio;
      this.setTitle("Micro-Magellan " + version);
      multiAcqManager_ = new MagellanAcquisitionsManager(studio_, this);
      initComponents();
      moreInitialization();
      this.setVisible(true);
      addGlobalSettingsListeners();
      storeAcqSettings_ = true;
      storeCurrentAcqSettings();
      WindowPositioning.setUpBoundsMemory(this, this.getClass(), "MagellanGUI");
   }

   /**
    * The Magellan plugin runs as a singleton.  This static function returns
    * the single instance of the Magellan GUI ojecte, or null if it has not been constructed yet.
    *
    * @return singleton instance of the GUI object.
    */
   public static GUI getInstance() {
      return singleton_;
   }

   public static double getTileOverlap() {
      return ((Number) getInstance().tileOverlapSpinner_.getValue()).doubleValue();
   }

   /**
    * Adjusts the GUI display to signal to the user whether an acquisition is running.
    *
    * @param running true signals an acquisition is running.
    */
   public void acquisitionRunning(boolean running) {
      // disable or enable the controls that cannot be changed during acquisition
      zStepSpinner_.setEnabled(!running);
      zStepLabel_.setEnabled(!running);
      this.repaint();
   }

   public static void updateEstiamtedSizeLabel(final String text) {
      SwingUtilities.invokeLater(() -> singleton_.estSizeLabel_.setText(text));
   }

   public static void updateEstiamtedDurationLabel(final String text) {
      SwingUtilities.invokeLater(() -> singleton_.estDurationLabel_.setText(text));
   }

   private void updateAvailableDiskSpaceLabel() {
      double mb = (new File(settings_.getStoredSavingDirectory()).getUsableSpace())
            / 1024.0 / 1024.0;
      if (mb < 1024) {
         freeDiskSpaceLabel_.setText("Free disk space: " + ((int) mb) + " MB");
      } else {
         double gb = mb / 1024.0;
         freeDiskSpaceLabel_.setText("Free disk space: " + String.format("%.1f", gb) + " GB");
      }
   }

   /**
    * This function should be called when the acquisitions settings were changed.
    * It will update the GUI to reflect these latest acuqiitions settings.
    */
   public void acquisitionSettingsChanged() {
      updateAvailableDiskSpaceLabel();
      //refresh GUI and store its state in current acq settings
      refreshBoldedText();
      ((MultipleAcquisitionTableModel) multipleAcqTable_.getModel()).fireTableDataChanged();
      multipleAcqTable_.repaint();
      //Tell the channels table something has changed
      ((SimpleChannelTableModel) channelsTable_.getModel()).fireTableDataChanged();
      channelsTable_.repaint();
      storeCurrentAcqSettings();
   }

   public MagellanGUIAcquisitionSettings getActiveAcquisitionSettings() {
      return multiAcqManager_.getAcquisitionSettings(multiAcqSelectedIndex_);
   }

   private void moreInitialization() {
      //add link to user guide label
      userGuideLink_.addMouseListener(new MouseAdapter() {
         @Override
         public void mousePressed(MouseEvent e) {
            new Thread(() -> {
               try {
                  ij.plugin.BrowserLauncher.openURL("https://micro-manager.org/wiki/MicroMagellan");
               } catch (IOException ex) {
                  Log.log("couldn't open User guide link");
               }
            }).start();
         }
      });
      //add link to citation
      citeLink_.addMouseListener(new MouseAdapter() {
         @Override
         public void mousePressed(MouseEvent e) {
            new Thread(() -> {
               try {
                  ij.plugin.BrowserLauncher.openURL("http://www.nature.com/nmeth/journal/v13/n10/full/nmeth.3991.html");
               } catch (IOException ex) {
                  Log.log("couldn't open citation link");
               }
            }).start();
         }
      });

      //add link to g report
      bugReportLink_.addMouseListener(new MouseAdapter() {
         @Override
         public void mousePressed(MouseEvent e) {
            new Thread(() -> {
               try {
                  ij.plugin.BrowserLauncher.openURL("https://github.com/micro-manager/pycro-manager/issues");
               } catch (IOException ex) {
                  Log.log("couldn't open citation link");
               }
            }).start();
         }
      });

      //exactly one acquisition selected at all times
      multipleAcqTable_.setSelectionModel(new ExactlyOneRowSelectionModel());
      multipleAcqTable_.getSelectionModel().addListSelectionListener(e -> {
         if (e.getValueIsAdjusting()) {
            return;
            //action occurs second time this method is called, after the table gains focus
         }
         multiAcqSelectedIndex_ = multipleAcqTable_.getSelectedRow();
         //if last acq in list is removed, update the selected index
         if (multiAcqSelectedIndex_ == multipleAcqTable_.getModel().getRowCount()) {
            multipleAcqTable_.getSelectionModel().setSelectionInterval(
                  multiAcqSelectedIndex_ - 1,
                  multiAcqSelectedIndex_ - 1);
         }
         refreshAcqControlsFromSettings();
      });
      //Table column widths
      multipleAcqTable_.getColumnModel().getColumn(2).setMaxWidth(100); //status column

      channelsTable_.getColumnModel().getColumn(0).setMaxWidth(30); //Acitve checkbox column

      surfacesAndGridsTable_.getColumnModel().getColumn(0).setMaxWidth(120); //type column

      //set color renderer for channel table
      for (int col = 1; col < channelsTable_.getColumnModel().getColumnCount(); col++) {
         if (col == 4) {
            ColorRenderer cr = new ColorRenderer(true);
            ColorEditor ce = new ColorEditor((AbstractTableModel) channelsTable_.getModel(), col);
            channelsTable_.getColumnModel().getColumn(col).setCellRenderer(cr);
            channelsTable_.getColumnModel().getColumn(col).setCellEditor(ce);
         } else {
            DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();
            renderer.setHorizontalAlignment(SwingConstants.LEFT); // left justify
            channelsTable_.getColumnModel().getColumn(col).setCellRenderer(renderer);
         }
         //         if (col == 2) {
         //            //left justified editor
         //            JTextField tf = new JTextField();
         //            tf.setHorizontalAlignment(SwingConstants.LEFT);
         //            DefaultCellEditor ed = new DefaultCellEditor(tf);
         //            channelsTable_.getColumnModel().getColumn(col).setCellEditor(ed);
         //         }
      }

      //load global settings     
      globalSavingDirTextField_.setText(settings_.getStoredSavingDirectory());


      // load explore settings
      exploreSavingNameTextField_.setText(
              settings_.getPrefs().getString(EXPLORE_NAME_PREF,
                 "Untitled Explore Acquisition"));
      exploreUseZCheckBox_.setSelected(settings_.getPrefs().getBoolean(EXPLORE_USE_Z, false));
      exploreZStepSpinner_.setValue(settings_.getPrefs().getDouble(
            EXPLORE_Z_STEP, 1));
      exploreZStepSpinner_.setEnabled(exploreUseZCheckBox_.isSelected());
      tileOverlapSpinner_.setValue(settings_.getPrefs().getDouble(
            EXPLORE_TILE_OVERLAP, 0));

      refreshAcqControlsFromSettings();
      enableAndChangeFonts();

      //set XY footprint combos to default
      xyFootprintComboBox_.setSelectedIndex(0);
   }

   private void colorAndBoldButton(JRadioButton button) {
      button.setFont(button.getFont().deriveFont(button.isSelected() ? Font.BOLD : Font.PLAIN));
      button.setForeground(button.isSelected() ? LIGHT_GREEN : DEFAULT_RADIO_BUTTON_TEXT_COLOR);
      button.invalidate();
      button.validate();
   }

   private void refreshBoldedText() {
      if (acqTabbedPane_.getTabCount() == 3) { //Make sure inititilization is done
         JLabel l3 = new JLabel("Space");
         l3.setForeground(LIGHT_GREEN);
         l3.setFont(acqTabbedPane_.getComponent(0).getFont().deriveFont(Font.BOLD));
         acqTabbedPane_.setTabComponentAt(0, l3);
         JLabel l4 = new JLabel("Channels");
         boolean useChannels = multiAcqManager_.getAcquisitionSettings(multiAcqSelectedIndex_)
               .getChannelGroup() != null
               && !multiAcqManager_.getAcquisitionSettings(multiAcqSelectedIndex_)
               .getChannelGroup().equals("");
         l4.setForeground(useChannels ? LIGHT_GREEN : Color.black);
         l4.setFont(acqTabbedPane_.getComponent(1).getFont().deriveFont(
               useChannels ? Font.BOLD : Font.PLAIN));
         acqTabbedPane_.setTabComponentAt(1, l4);
         JLabel l2 = new JLabel("Time");
         l2.setForeground(timePointsCheckBox_.isSelected() ? LIGHT_GREEN : Color.black);
         l2.setFont(acqTabbedPane_.getComponent(2).getFont().deriveFont(
               timePointsCheckBox_.isSelected() ? Font.BOLD : Font.PLAIN));
         acqTabbedPane_.setTabComponentAt(2, l2);
         acqTabbedPane_.revalidate();
      }

      if (exploreAcqTabbedPane_.getTabCount() == 2) {
         JLabel l = new JLabel("Explore");
         l.setForeground(exploreAcqTabbedPane_.getSelectedIndex() == 0 ? LIGHT_GREEN : Color.black);
         l.setFont(exploreAcqTabbedPane_.getComponent(0).getFont().deriveFont(
                 exploreAcqTabbedPane_.getSelectedIndex() == 0 ? Font.BOLD : Font.PLAIN));
         exploreAcqTabbedPane_.setTabComponentAt(0, l);

         JLabel l1 = new JLabel("Acquisition(s)");
         l1.setForeground(exploreAcqTabbedPane_.getSelectedIndex()
               == 1 ? LIGHT_GREEN : Color.black);
         l1.setFont(exploreAcqTabbedPane_.getComponent(1).getFont().deriveFont(
                 exploreAcqTabbedPane_.getSelectedIndex() == 1 ? Font.BOLD : Font.PLAIN));
         exploreAcqTabbedPane_.setTabComponentAt(1, l1);
         exploreAcqTabbedPane_.revalidate();
      }

      //set bold for all buttons selected
      colorAndBoldButton(button2D_);
      colorAndBoldButton(button3D_);
      colorAndBoldButton(volumeBetweenSurfacesButton_);
      colorAndBoldButton(withinDistanceFromSurfacesButton_);
      colorAndBoldButton(cuboidVolumeButton_);
      colorAndBoldButton(noCollectionPlaneButton_);
      colorAndBoldButton(useCollectionPlaneButton_);

      labelDiagram2dSimple_.setBorder(BorderFactory.createLineBorder(
              noCollectionPlaneButton_.isSelected() ? DARK_GREEN : Color.BLACK, 4, true));
      labelDiagram2DSurface_.setBorder(BorderFactory.createLineBorder(
              useCollectionPlaneButton_.isSelected() ? DARK_GREEN : Color.BLACK, 4, true));
   }

   private void enableAndChangeFonts() {
      //Set Tab titles
      refreshBoldedText();
      //Enable or disable time point stuff
      for (Component c : timePointsPanel_.getComponents()) {
         c.setEnabled(timePointsCheckBox_.isSelected());
      }
   }

   /**
    * Copies the acquisition settings specified by the user in the GUI into the
    * MagellanGUIAcquisitionsSettings object.
    */
   public void storeCurrentAcqSettings() {
      if (!storeAcqSettings_) {
         return;
      }
      MagellanGUIAcquisitionSettings settings = multiAcqManager_.getAcquisitionSettings(
            multiAcqSelectedIndex_);
      //saving
      settings.dir_ = globalSavingDirTextField_.getText();
      settings.name_ = multiAcqManager_.getAcquisitionSettingsName(multiAcqSelectedIndex_);
      //time
      settings.timeEnabled_ = timePointsCheckBox_.isSelected();
      if (settings.timeEnabled_) {
         settings.numTimePoints_ = (Integer) numTimePointsSpinner_.getValue();
         settings.timePointInterval_ = (Double) timeIntervalSpinner_.getValue();
         settings.timeIntervalUnit_ = timeIntevalUnitCombo_.getSelectedIndex();
      }
      //space  
      settings.xyFootprint_ = manager_.getSurfaceOrGrid(xyFootprintComboBox_.getSelectedIndex());
      if (button2D_.isSelected()) { //2D pane
         settings.collectionPlane_ = manager_.getSurface(collectionPlaneCombo_.getSelectedIndex());
         if (useCollectionPlaneButton_.isSelected()) {
            settings.spaceMode_ = MagellanGUIAcquisitionSettings.REGION_2D_SURFACE_GUIDED;
         } else {
            settings.collectionPlane_ = null;
            settings.spaceMode_ = MagellanGUIAcquisitionSettings.REGION_2D;
         }
      } else if (button3D_.isSelected()) {
         settings.zStep_ = (Double) zStepSpinner_.getValue();
         settings.channelsAtEverySlice_ = acqOrderCombo_.getSelectedIndex() == 1;
         if (cuboidVolumeButton_.isSelected()) {
            settings.spaceMode_ = MagellanGUIAcquisitionSettings.CUBOID_Z_STACK;
            settings.zStart_ = (Double) zStartSpinner_.getValue();
            settings.zEnd_ = (Double) zEndSpinner_.getValue();
         } else if (volumeBetweenSurfacesButton_.isSelected()) {
            settings.spaceMode_ = MagellanGUIAcquisitionSettings.VOLUME_BETWEEN_SURFACES_Z_STACK;
            settings.topSurface_ = manager_.getSurface(topSurfaceCombo_.getSelectedIndex());
            settings.bottomSurface_ = manager_.getSurface(bottomSurfaceCombo_.getSelectedIndex());
            settings.distanceAboveTopSurface_ = (Double) umAboveTopSurfaceSpinner_.getValue();
            settings.distanceBelowBottomSurface_ = (Double) umBelowBottomSurfaceSpinner_.getValue();
         } else if (withinDistanceFromSurfacesButton_.isSelected()) {
            settings.spaceMode_ = MagellanGUIAcquisitionSettings.SURFACE_FIXED_DISTANCE_Z_STACK;
            settings.distanceBelowFixedSurface_ = ((Number) distanceBelowFixedSurfaceSpinner_
                  .getValue()).doubleValue();
            settings.distanceAboveFixedSurface_ = ((Number) distanceAboveFixedSurfaceSpinner_
                  .getValue()).doubleValue();
            settings.fixedSurface_ = manager_.getSurface(fixedDistanceSurfaceComboBox_
                  .getSelectedIndex());
         }
      } else {
         settings.spaceMode_ = MagellanGUIAcquisitionSettings.NO_SPACE;
         //This isn't a thing anymore...
      }

      //channels
      settings.setChannelGroup((String) channelGroupCombo.getSelectedItem());

      settings.storePreferedValues();
      multipleAcqTable_.repaint();

      //      acqDurationEstimator_.calcAcqDuration(getActiveAcquisitionSettings());
   }

   /**
    * Updates the GUI with the settings in the MagellanGUIAcquisitionsSettings object.
    */
   public void refreshAcqControlsFromSettings() {
      MagellanGUIAcquisitionSettings settings = multiAcqManager_.getAcquisitionSettings(
            multiAcqSelectedIndex_);
      //don't autostore outdated settings while controls are being populated
      storeAcqSettings_ = false;
      multiAcqManager_.setAcquisitionName(multiAcqSelectedIndex_, settings.name_);
      //time
      timePointsCheckBox_.setSelected(settings.timeEnabled_);
      numTimePointsSpinner_.setValue(settings.numTimePoints_);
      timeIntervalSpinner_.setValue(settings.timePointInterval_);
      timeIntevalUnitCombo_.setSelectedIndex(settings.timeIntervalUnit_);
      //space           
      acqOrderCombo_.setSelectedIndex(settings.channelsAtEverySlice_ ? 1 : 0);
      if (settings.spaceMode_ == MagellanGUIAcquisitionSettings.REGION_2D
            || settings.spaceMode_ == MagellanGUIAcquisitionSettings.REGION_2D_SURFACE_GUIDED) {
         boolean useSurface = settings.spaceMode_ == MagellanGUIAcquisitionSettings
               .REGION_2D_SURFACE_GUIDED;
         noCollectionPlaneButton_.setSelected(!useSurface);
         useCollectionPlaneButton_.setSelected(useSurface);
         button2D_.setSelected(true);
         button2DActionPerformed(null);
      } else {
         button3D_.setSelected(true);
         button3DActionPerformed(null);
      }
      if (settings.spaceMode_ == MagellanGUIAcquisitionSettings.CUBOID_Z_STACK) {
         cuboidVolumeButton_.setSelected(true);
         cuboidVolumeButtonActionPerformed(null);
      } else if (settings.spaceMode_ == MagellanGUIAcquisitionSettings
            .VOLUME_BETWEEN_SURFACES_Z_STACK) {
         volumeBetweenSurfacesButton_.setSelected(true);
         volumeBetweenSurfacesButtonActionPerformed(null);
      } else if (settings.spaceMode_ == MagellanGUIAcquisitionSettings
            .SURFACE_FIXED_DISTANCE_Z_STACK) {
         withinDistanceFromSurfacesButton_.setSelected(true);
         withinDistanceFromSurfacesButtonActionPerformed(null);
      }
      zStepSpinner_.setValue(settings.zStep_);
      zStartSpinner_.setValue(settings.zStart_);
      zEndSpinner_.setValue(settings.zEnd_);
      distanceBelowFixedSurfaceSpinner_.setValue(settings.distanceBelowFixedSurface_);
      distanceAboveFixedSurfaceSpinner_.setValue(settings.distanceAboveFixedSurface_);
      umAboveTopSurfaceSpinner_.setValue(settings.distanceAboveTopSurface_);
      umBelowBottomSurfaceSpinner_.setValue(settings.distanceBelowBottomSurface_);
      //select surfaces/regions
      topSurfaceCombo_.setSelectedItem(settings.topSurface_);
      bottomSurfaceCombo_.setSelectedItem(settings.bottomSurface_);
      fixedDistanceSurfaceComboBox_.setSelectedItem(settings.fixedSurface_);
      xyFootprintComboBox_.setSelectedItem(settings.xyFootprint_);
      collectionPlaneCombo_.setSelectedItem(settings.collectionPlane_);

      //channels
      channelGroupCombo.setSelectedItem(settings.getChannelGroup());
      //make sure the table has a reference to the current channels
      ((SimpleChannelTableModel) channelsTable_.getModel()).setChannels(settings.channels_);
      ((SimpleChannelTableModel) channelsTable_.getModel()).fireTableDataChanged();

      enableAndChangeFonts();

      repaint();
      storeAcqSettings_ = true;
   }

   private void addGlobalSettingsListeners() {
      globalSavingDirTextField_.getDocument().addDocumentListener(new DocumentListener() {
         @Override
         public void insertUpdate(DocumentEvent e) {
            settings_.storeSavingDirectory(globalSavingDirTextField_.getText());
            acquisitionSettingsChanged();
         }

         @Override
         public void removeUpdate(DocumentEvent e) {
            settings_.storeSavingDirectory(globalSavingDirTextField_.getText());
            acquisitionSettingsChanged();
         }

         @Override
         public void changedUpdate(DocumentEvent e) {
            settings_.storeSavingDirectory(globalSavingDirTextField_.getText());
            acquisitionSettingsChanged();
         }
      });
   }

   //store values when user types text, becuase
   private void addTextEditListener(JSpinner spinner) {
      JSpinner.NumberEditor editor = (JSpinner.NumberEditor) spinner.getEditor();
      editor.getTextField().addFocusListener(new FocusAdapter() {
         @Override
         public void focusLost(FocusEvent e) {
            storeCurrentAcqSettings();
         }
      });
   }

   /**
    * Enable/Disable the acquisition related buttons in the gui.
    *
    * @param enable true is these buttons should be enabled, false to disable
    */
   public void enableMultiAcquisitionControls(boolean enable) {
      addAcqButton_.setEnabled(enable);
      removeAcqButton_.setEnabled(enable);
      moveAcqDownButton_.setEnabled(enable);
      moveAcqUpButton_.setEnabled(enable);
      runAcqButton_.setText(enable ? "Run acquisition(s)" : "Abort acquisiton(s)");
      repaint();
      acquisitionRunning_ = !enable;
   }

   /**
    * Provides the directory specified by the user where stuff (what stuff?) should be saved.
    *
    * @return String containing path to the saving directory
    */
   public String getSavingDir() {
      if (globalSavingDirTextField_ == null) {
         return null;
      }
      return globalSavingDirTextField_.getText();
   }

   /**
    * Channel offsets must be within 9 of each other.
    */
   public void validateChannelOffsets() {
      int minOffset = 200;
      int maxOffset = -200;
      for (JSpinner s : offsetSpinners_) {
         minOffset = Math.min(((Number) s.getValue()).intValue(), minOffset);
         maxOffset = Math.min(((Number) s.getValue()).intValue(), maxOffset);
      }
      if (Math.abs(minOffset - maxOffset) > 9) {
         for (JSpinner s : offsetSpinners_) {
            s.setValue(Math.min(((Number) s.getValue()).intValue(), minOffset + 9));
         }
      }
   }

   public boolean getUseZ() {
      return exploreUseZCheckBox_.isSelected();
   }

   public double getExploreZStep() {
      return ((Number) exploreZStepSpinner_.getValue()).doubleValue();
   }

   public double getOverlap() {
      return (Double) tileOverlapSpinner_.getValue();
   }

   public String getExploreSavingName() {
      return exploreSavingNameTextField_.getText();
   }

   public String getExploreChannelGroup() {
      return (String) exploreChannelGroupCombo_.getSelectedItem();
   }

   /**
    * This method is called from within the constructor to initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is always
    * regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      zStackModeButtonGroup_ = new ButtonGroup();
      z2DButtonGroup_ = new ButtonGroup();
      acq2D3DButtonGroup_ = new ButtonGroup();
      rootPanel_ = new JPanel();
      exploreAcqTabbedPane_ = new JTabbedPane();
      explorePanel = new JPanel();
      exploreUseZCheckBox_ = new JCheckBox();
      exploreZStepLabel_ = new JLabel();
      exploreZStepSpinner_ = new JSpinner();
      channelGroupLabel_ = new JLabel();
      exploreChannelGroupCombo_ = new JComboBox<>();
      exploreSavingNameLabel_ = new JLabel();
      exploreSavingNameTextField_ = new JTextField();
      newExploreWindowButton_ = new JButton();
      surfaceAndGridsPanel_ = new JPanel();
      deleteAllRegionsButton_ = new JButton();
      deleteSelectedRegionButton_ = new JButton();
      jScrollPane2 = new JScrollPane();
      surfacesAndGridsTable_ = new JTable();
      jButton2 = new JButton();
      jButton3 = new JButton();
      surfacesAndGrdisLabel_ = new JLabel();
      acqPanel = new JPanel();
      acqTabbedPane_ = new JTabbedPane();
      spaceTab_ = new JPanel();
      button3D_ = new JRadioButton();
      button2D_ = new JRadioButton();
      controls2DOr3D_ = new JPanel();
      panel2dControlsSpecific_ = new JPanel();
      panel2D_ = new JPanel();
      collectionPlaneCombo_ = new JComboBox<>();
      collectionPlaneLabel_ = new JLabel();
      noCollectionPlaneButton_ = new JRadioButton();
      useCollectionPlaneButton_ = new JRadioButton();
      labelDiagram2dSimple_ = new JLabel();
      labelDiagram2DSurface_ = new JLabel();
      panel3DControlsSpecific_ = new JPanel();
      acq3DSubtypePanel_ = new JPanel();
      simpleZPanel_ = new JPanel();
      zStartLabel = new JLabel();
      zEndLabel = new JLabel();
      zStartSpinner_ = new JSpinner();
      zEndSpinner_ = new JSpinner();
      setCurrentZStartButton_ = new JButton();
      setCurrentZEndButton_ = new JButton();
      labelDiagram3dSimple_ = new JLabel();
      volumeBetweenZPanel_ = new JPanel();
      topSurfaceLabel_ = new JLabel();
      bottomSurfaceLabel_ = new JLabel();
      topSurfaceCombo_ = new JComboBox();
      bottomSurfaceCombo_ = new JComboBox();
      umAboveTopSurfaceSpinner_ = new JSpinner();
      umAboveVolBetweenLabel_ = new JLabel();
      umBelowBottomSurfaceSpinner_ = new JSpinner();
      umBelowVolBetweenLabel_ = new JLabel();
      labelDiagram3d2Surface_ = new JLabel();
      fixedDistanceZPanel_ = new JPanel();
      distanceBelowSurfaceLabel_ = new JLabel();
      distanceBelowFixedSurfaceSpinner_ = new JSpinner();
      distanceAboveSurfaceLabel_ = new JLabel();
      distanceAboveFixedSurfaceSpinner_ = new JSpinner();
      umAboveLabel_ = new JLabel();
      umBelowLabel_ = new JLabel();
      fixedSurfaceLabel_ = new JLabel();
      fixedDistanceSurfaceComboBox_ = new JComboBox();
      labelDiagram3dSurface_ = new JLabel();
      zStepLabel_ = new JLabel();
      zStepSpinner_ = new JSpinner();
      acqOrderLabel_ = new JLabel();
      acqOrderCombo_ = new JComboBox<>();
      withinDistanceFromSurfacesButton_ = new JRadioButton();
      volumeBetweenSurfacesButton_ = new JRadioButton();
      cuboidVolumeButton_ = new JRadioButton();
      footprin2DLabel_ = new JLabel();
      xyFootprintComboBox_ = new JComboBox<>();
      channelsTab = new JPanel();
      jScrollPane1 = new JScrollPane();
      channelsTable_ = new JTable();
      jLabel3 = new JLabel();
      channelGroupCombo = new JComboBox<>();
      jButton1 = new JButton();
      syncExposuresButton_ = new JButton();
      timePointsTab_ = new JPanel();
      timePointsPanel_ = new JPanel();
      timeIntevalUnitCombo_ = new JComboBox();
      timeIntervalLabel_ = new JLabel();
      numTimePointsLabel_ = new JLabel();
      numTimePointsSpinner_ = new JSpinner();
      timeIntervalSpinner_ = new JSpinner();
      timePointsCheckBox_ = new JCheckBox();
      runAcqPanel_ = new JPanel();
      runAcqButton_ = new JButton();
      estDurationLabel_ = new JLabel();
      estSizeLabel_ = new JLabel();
      jPanel2 = new JPanel();
      multipleAcqScrollPane_ = new JScrollPane();
      multipleAcqTable_ = new JTable();
      jPanel3 = new JPanel();
      moveAcqUpButton_ = new JButton();
      removeAcqButton_ = new JButton();
      moveAcqDownButton_ = new JButton();
      addAcqButton_ = new JButton();
      bottomPanel_ = new JPanel();
      userGuideLink_ = new JLabel();
      citeLink_ = new JLabel();
      bugReportLink_ = new JLabel();
      jPanel1 = new JPanel();
      freeDiskSpaceLabel_ = new JLabel();
      openDatasetButton_ = new JButton();
      exploreBrowseButton_ = new JButton();
      exploreSavingDirLabel_ = new JLabel();
      globalSavingDirTextField_ = new JTextField();
      overlapLabel_ = new JLabel();
      tileOverlapSpinner_ = new JSpinner();
      percentLabel_ = new JLabel();

      setBounds(new java.awt.Rectangle(0, 23, 740, 654));
      setMinimumSize(new java.awt.Dimension(730, 650));
      getContentPane().setLayout(new BoxLayout(getContentPane(),
            BoxLayout.LINE_AXIS));

      exploreAcqTabbedPane_.setPreferredSize(new java.awt.Dimension(727, 525));
      exploreAcqTabbedPane_.addChangeListener(evt -> exploreAcqTabbedPaneStateChanged(evt));

      Font tahoma14Pt = new Font("Tahoma", Font.PLAIN, 14);

      exploreUseZCheckBox_.setFont(tahoma14Pt);
      exploreUseZCheckBox_.setText("<html>Use Z Drive:</html>");
      exploreUseZCheckBox_.addActionListener(e -> {
         exploreZStepSpinner_.setEnabled(exploreUseZCheckBox_.isSelected());
         exploreZStepLabel_.setEnabled(exploreUseZCheckBox_.isSelected());
      });

      exploreZStepLabel_.setFont(tahoma14Pt);
      exploreZStepLabel_.setText("<html>Z-step (&mu;m):</html>");

      exploreZStepSpinner_.setFont(tahoma14Pt);
      exploreZStepSpinner_.setModel(new SpinnerNumberModel(1.0d, null, null, 1.0d));
      //exploreZStepSpinner_.addChangeListener(evt -> exploreZStepSpinnerStateChanged(evt));

      channelGroupLabel_.setFont(tahoma14Pt);
      channelGroupLabel_.setText("Channel Group (optional): ");

      exploreChannelGroupCombo_.setFont(tahoma14Pt);
      exploreChannelGroupCombo_.setModel(new ChannelComboBoxModel());

      exploreSavingNameLabel_.setFont(tahoma14Pt);
      exploreSavingNameLabel_.setText("Saving name: ");

      exploreSavingNameTextField_.setFont(tahoma14Pt); // NOI18N
      exploreSavingNameTextField_.setText("jTextField2");
      exploreSavingNameTextField_.addActionListener(
            evt -> exploreSavingNameTextFieldActionPerformed(evt));

      newExploreWindowButton_.setFont(tahoma14Pt);
      newExploreWindowButton_.setText("Explore!");
      newExploreWindowButton_.addActionListener(evt -> newExploreWindowButtonActionPerformed(evt));

      deleteAllRegionsButton_.setFont(tahoma14Pt);
      deleteAllRegionsButton_.setText("Delete all");
      deleteAllRegionsButton_.addActionListener(evt -> deleteAllRegionsButtonActionPerformed(evt));

      deleteSelectedRegionButton_.setFont(tahoma14Pt);
      deleteSelectedRegionButton_.setText("Delete selected");
      deleteSelectedRegionButton_.addActionListener(
            evt -> deleteSelectedRegionButtonActionPerformed(evt));

      surfacesAndGridsTable_.setModel(new SurfaceGridTableModel());
      surfacesAndGridsTable_.setSelectionMode(ListSelectionModel
            .SINGLE_INTERVAL_SELECTION);
      jScrollPane2.setViewportView(surfacesAndGridsTable_);

      jButton2.setText("Export selected to micro-manager");
      jButton2.addActionListener(evt -> jButton2ActionPerformed(evt));

      jButton3.setText("Export all");
      jButton3.addActionListener(evt -> jButton3ActionPerformed(evt));

      GroupLayout surfaceAndGridsPanelLayout = new GroupLayout(
            surfaceAndGridsPanel_);
      surfaceAndGridsPanel_.setLayout(surfaceAndGridsPanelLayout);
      surfaceAndGridsPanelLayout.setHorizontalGroup(
            surfaceAndGridsPanelLayout.createParallelGroup(
                  GroupLayout.Alignment.LEADING)
            .addGroup(surfaceAndGridsPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addComponent(deleteSelectedRegionButton_)
            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(deleteAllRegionsButton_)
            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jButton2)
            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jButton3)
            .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(surfaceAndGridsPanelLayout.createSequentialGroup()
            .addComponent(jScrollPane2, GroupLayout.PREFERRED_SIZE, 668,
                  GroupLayout.PREFERRED_SIZE)
            .addGap(0, 32, Short.MAX_VALUE))
      );
      surfaceAndGridsPanelLayout.setVerticalGroup(
            surfaceAndGridsPanelLayout.createParallelGroup(
                  GroupLayout.Alignment.LEADING)
            .addGroup(surfaceAndGridsPanelLayout.createSequentialGroup()
            .addGap(20, 20, 20)
            .addComponent(jScrollPane2, GroupLayout.DEFAULT_SIZE, 286, Short.MAX_VALUE)
            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(surfaceAndGridsPanelLayout.createParallelGroup(
                  GroupLayout.Alignment.BASELINE)
               .addComponent(deleteSelectedRegionButton_)
               .addComponent(deleteAllRegionsButton_)
               .addComponent(jButton2)
               .addComponent(jButton3))
            .addContainerGap())
      );

      surfacesAndGrdisLabel_.setFont(new Font("Lucida Grande", 1, 18)); // NOI18N
      surfacesAndGrdisLabel_.setText("Surfaces and Grids");

      GroupLayout explorePanelLayout = new GroupLayout(explorePanel);
      explorePanel.setLayout(explorePanelLayout);
      explorePanelLayout.setHorizontalGroup(
            explorePanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(explorePanelLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(explorePanelLayout.createParallelGroup(
                  GroupLayout.Alignment.LEADING)
               .addComponent(surfaceAndGridsPanel_, GroupLayout.DEFAULT_SIZE,
                     GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
               .addGroup(explorePanelLayout.createSequentialGroup()
                  .addComponent(exploreSavingNameLabel_)
                  .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(exploreSavingNameTextField_))
               .addGroup(explorePanelLayout.createSequentialGroup()
                  .addGroup(explorePanelLayout.createParallelGroup(
                        GroupLayout.Alignment.LEADING)
                     .addGroup(explorePanelLayout.createSequentialGroup()
                        .addComponent(exploreUseZCheckBox_, GroupLayout.PREFERRED_SIZE,
                                GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addComponent(exploreZStepLabel_, GroupLayout.PREFERRED_SIZE,
                              GroupLayout.DEFAULT_SIZE,
                              GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(exploreZStepSpinner_, GroupLayout.PREFERRED_SIZE,
                              77, GroupLayout.PREFERRED_SIZE)
                        .addGap(291, 291, 291)
                        .addComponent(newExploreWindowButton_,
                              GroupLayout.PREFERRED_SIZE, 103,
                              GroupLayout.PREFERRED_SIZE))
                     .addGroup(explorePanelLayout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(surfacesAndGrdisLabel_))
                     .addGroup(explorePanelLayout.createSequentialGroup()
                        .addComponent(channelGroupLabel_)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(exploreChannelGroupCombo_,
                              GroupLayout.PREFERRED_SIZE, 172,
                              GroupLayout.PREFERRED_SIZE)))
                  .addGap(0, 0, Short.MAX_VALUE)))
            .addContainerGap())
      );
      explorePanelLayout.setVerticalGroup(
            explorePanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(explorePanelLayout.createSequentialGroup()
            .addGroup(explorePanelLayout.createParallelGroup(
                  GroupLayout.Alignment.LEADING)
               .addGroup(explorePanelLayout.createSequentialGroup()
                  .addContainerGap()
                  .addGroup(explorePanelLayout.createParallelGroup(
                        GroupLayout.Alignment.BASELINE)
                     .addComponent(exploreSavingNameTextField_,
                           GroupLayout.PREFERRED_SIZE,
                           GroupLayout.DEFAULT_SIZE,
                           GroupLayout.PREFERRED_SIZE)
                     .addComponent(exploreSavingNameLabel_))
                  .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                  .addGroup(explorePanelLayout.createParallelGroup(
                        GroupLayout.Alignment.BASELINE)
                     .addComponent(exploreUseZCheckBox_,
                                  GroupLayout.PREFERRED_SIZE,
                                  GroupLayout.DEFAULT_SIZE,
                                  GroupLayout.PREFERRED_SIZE)
                     .addComponent(exploreZStepSpinner_,
                           GroupLayout.PREFERRED_SIZE,
                           GroupLayout.DEFAULT_SIZE,
                           GroupLayout.PREFERRED_SIZE)
                     .addComponent(exploreZStepLabel_,
                           GroupLayout.PREFERRED_SIZE,
                           GroupLayout.DEFAULT_SIZE,
                           GroupLayout.PREFERRED_SIZE))
                  .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                  .addGroup(explorePanelLayout.createParallelGroup(
                        GroupLayout.Alignment.BASELINE)
                     .addComponent(channelGroupLabel_)
                     .addComponent(exploreChannelGroupCombo_,
                           GroupLayout.PREFERRED_SIZE,
                           GroupLayout.DEFAULT_SIZE,
                           GroupLayout.PREFERRED_SIZE)))
               .addGroup(explorePanelLayout.createSequentialGroup()
                  .addGap(53, 53, 53)
                  .addComponent(newExploreWindowButton_,
                        GroupLayout.PREFERRED_SIZE, 40,
                        GroupLayout.PREFERRED_SIZE)))
            .addGap(18, 18, 18)
            .addComponent(surfacesAndGrdisLabel_)
            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(surfaceAndGridsPanel_, GroupLayout.DEFAULT_SIZE,
                  GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );

      addTextEditListener(zStepSpinner_);

      exploreAcqTabbedPane_.addTab("Explore", explorePanel);

      acqTabbedPane_.setFont(tahoma14Pt);

      acq2D3DButtonGroup_.add(button3D_);
      button3D_.setSelected(true);
      button3D_.setText("3D");
      button3D_.addActionListener(evt -> button3DActionPerformed(evt));

      acq2D3DButtonGroup_.add(button2D_);
      button2D_.setText("2D");
      button2D_.addActionListener(evt -> button2DActionPerformed(evt));

      controls2DOr3D_.setLayout(new java.awt.CardLayout());

      collectionPlaneCombo_.setFont(tahoma14Pt);
      collectionPlaneCombo_.setModel(new SurfaceGridComboBoxModel(true, false));
      collectionPlaneCombo_.addActionListener(evt -> collectionPlaneComboActionPerformed(evt));

      z2DButtonGroup_.add(noCollectionPlaneButton_);
      noCollectionPlaneButton_.setText("Use current Z position");
      noCollectionPlaneButton_.addActionListener(evt
            -> noCollectionPlaneButtonActionPerformed(evt));

      z2DButtonGroup_.add(useCollectionPlaneButton_);
      useCollectionPlaneButton_.setText("Get Z position from surface");
      useCollectionPlaneButton_.addActionListener(
            evt -> useCollectionPlaneButtonActionPerformed(evt));

      labelDiagram2dSimple_.setIcon(new ImageIcon(getClass().getResource(
            "/org/micromanager/magellan/2dsimple.png"))); // NOI18N
      labelDiagram2dSimple_.setBorder(BorderFactory.createLineBorder(
            new java.awt.Color(0, 0, 0), 4));

      labelDiagram2DSurface_.setIcon(new ImageIcon(
            getClass().getResource("/org/micromanager/magellan/2dsurface.png"))); // NOI18N
      labelDiagram2DSurface_.setBorder(BorderFactory.createLineBorder(
            new java.awt.Color(0, 0, 0), 4));

      GroupLayout panel2DLayout = new GroupLayout(panel2D_);
      panel2D_.setLayout(panel2DLayout);
      panel2DLayout.setHorizontalGroup(
            panel2DLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(panel2DLayout.createSequentialGroup()
            .addGroup(panel2DLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
               .addGroup(panel2DLayout.createSequentialGroup()
                  .addGroup(panel2DLayout.createParallelGroup(
                        GroupLayout.Alignment.LEADING, false)
                     .addGroup(panel2DLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(collectionPlaneCombo_, 0,
                              GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                     .addComponent(useCollectionPlaneButton_))
                  .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(labelDiagram2DSurface_)
                  .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(collectionPlaneLabel_))
               .addGroup(panel2DLayout.createSequentialGroup()
                  .addComponent(noCollectionPlaneButton_,
                        GroupLayout.PREFERRED_SIZE, 189,
                        GroupLayout.PREFERRED_SIZE)
                  .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                  .addComponent(labelDiagram2dSimple_)))
            .addContainerGap(58, Short.MAX_VALUE))
      );
      panel2DLayout.setVerticalGroup(
            panel2DLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(panel2DLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(panel2DLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
               .addComponent(noCollectionPlaneButton_)
               .addComponent(labelDiagram2dSimple_))
            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(panel2DLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
               .addGroup(panel2DLayout.createSequentialGroup()
                  .addComponent(useCollectionPlaneButton_)
                  .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(collectionPlaneCombo_, GroupLayout.PREFERRED_SIZE,
                        GroupLayout.DEFAULT_SIZE,
                        GroupLayout.PREFERRED_SIZE)
                  .addGap(28, 28, 28)
                  .addComponent(collectionPlaneLabel_))
               .addComponent(labelDiagram2DSurface_))
            .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );

      GroupLayout panel2DControlsSpecificLayout = new GroupLayout(
            panel2dControlsSpecific_);
      panel2dControlsSpecific_.setLayout(panel2DControlsSpecificLayout);
      panel2DControlsSpecificLayout.setHorizontalGroup(
            panel2DControlsSpecificLayout.createParallelGroup(
               GroupLayout.Alignment.LEADING)
            .addGroup(panel2DControlsSpecificLayout.createSequentialGroup()
            .addComponent(panel2D_, GroupLayout.PREFERRED_SIZE,
                  GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
            .addGap(0, 17, Short.MAX_VALUE))
      );
      panel2DControlsSpecificLayout.setVerticalGroup(
            panel2DControlsSpecificLayout.createParallelGroup(
               GroupLayout.Alignment.LEADING)
            .addGroup(panel2DControlsSpecificLayout.createSequentialGroup()
            .addComponent(panel2D_, GroupLayout.PREFERRED_SIZE,
                  GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
            .addGap(0, 0, Short.MAX_VALUE))
      );

      controls2DOr3D_.add(panel2dControlsSpecific_, "2D");

      acq3DSubtypePanel_.setLayout(new java.awt.CardLayout());

      zStartLabel.setFont(tahoma14Pt);
      zStartLabel.setText("<html>Z-start (&mu;m)</html>");

      zEndLabel.setFont(tahoma14Pt);
      zEndLabel.setText("<html>Z-end (&mu;m)</html>");

      zStartSpinner_.setFont(tahoma14Pt);
      zStartSpinner_.setModel(new SpinnerNumberModel(0.0d, null, null, 1.0d));
      zStartSpinner_.addChangeListener(evt -> zStartSpinnerStateChanged(evt));

      zEndSpinner_.setFont(tahoma14Pt);
      zEndSpinner_.setModel(new SpinnerNumberModel(0.0d, null, null, 1.0d));
      zEndSpinner_.addChangeListener(evt -> zEndSpinnerStateChanged(evt));

      setCurrentZStartButton_.setText("Set current Z");
      setCurrentZStartButton_.addActionListener(evt -> setCurrentZStartButtonActionPerformed(evt));

      setCurrentZEndButton_.setText("Set current Z");
      setCurrentZEndButton_.addActionListener(evt -> setCurrentZEndButtonActionPerformed(evt));

      labelDiagram3dSimple_.setIcon(new ImageIcon(getClass().getResource(
            "/org/micromanager/magellan/3dsimple.png")));
      labelDiagram3dSimple_.setBorder(new LineBorder(
            new java.awt.Color(0, 128, 0), 4, true));

      GroupLayout simpleZPanelLayout = new GroupLayout(simpleZPanel_);
      simpleZPanel_.setLayout(simpleZPanelLayout);
      simpleZPanelLayout.setHorizontalGroup(
            simpleZPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(simpleZPanelLayout.createSequentialGroup()
            .addGroup(simpleZPanelLayout.createParallelGroup(
                  GroupLayout.Alignment.LEADING)
               .addGroup(simpleZPanelLayout.createSequentialGroup()
                  .addContainerGap()
                  .addGroup(simpleZPanelLayout.createParallelGroup(
                        GroupLayout.Alignment.LEADING, false)
                     .addGroup(simpleZPanelLayout.createSequentialGroup()
                        .addComponent(zStartLabel, GroupLayout.PREFERRED_SIZE,
                              GroupLayout.DEFAULT_SIZE,
                              GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(zStartSpinner_, GroupLayout.PREFERRED_SIZE,
                              82, GroupLayout.PREFERRED_SIZE))
                     .addGroup(simpleZPanelLayout.createSequentialGroup()
                        .addComponent(zEndLabel, GroupLayout.PREFERRED_SIZE,
                              GroupLayout.DEFAULT_SIZE,
                              GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(zEndSpinner_))))
               .addComponent(setCurrentZStartButton_)
               .addComponent(setCurrentZEndButton_))
            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(labelDiagram3dSimple_, GroupLayout.PREFERRED_SIZE,
                  295, GroupLayout.PREFERRED_SIZE)
            .addGap(0, 0, 0))
      );
      simpleZPanelLayout.setVerticalGroup(
            simpleZPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(simpleZPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(simpleZPanelLayout.createParallelGroup(
                  GroupLayout.Alignment.LEADING, false)
               .addGroup(simpleZPanelLayout.createSequentialGroup()
                  .addGroup(simpleZPanelLayout.createParallelGroup(
                        GroupLayout.Alignment.BASELINE)
                     .addComponent(zStartLabel, GroupLayout.PREFERRED_SIZE,
                           GroupLayout.DEFAULT_SIZE,
                           GroupLayout.PREFERRED_SIZE)
                     .addComponent(zStartSpinner_, GroupLayout.PREFERRED_SIZE,
                           GroupLayout.DEFAULT_SIZE,
                           GroupLayout.PREFERRED_SIZE))
                  .addGap(2, 2, 2)
                  .addComponent(setCurrentZStartButton_)
                  .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                  .addGroup(simpleZPanelLayout.createParallelGroup(
                        GroupLayout.Alignment.BASELINE)
                     .addComponent(zEndLabel, GroupLayout.PREFERRED_SIZE,
                           GroupLayout.DEFAULT_SIZE,
                           GroupLayout.PREFERRED_SIZE)
                     .addComponent(zEndSpinner_, GroupLayout.PREFERRED_SIZE,
                           GroupLayout.DEFAULT_SIZE,
                           GroupLayout.PREFERRED_SIZE))
                  .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED,
                        GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                  .addComponent(setCurrentZEndButton_))
               .addComponent(labelDiagram3dSimple_))
            .addContainerGap(25, Short.MAX_VALUE))
      );

      addTextEditListener(zStartSpinner_);
      addTextEditListener(zEndSpinner_);

      acq3DSubtypePanel_.add(simpleZPanel_, "cuboid");

      topSurfaceLabel_.setFont(tahoma14Pt);
      topSurfaceLabel_.setText("Z-start");

      bottomSurfaceLabel_.setFont(tahoma14Pt);
      bottomSurfaceLabel_.setText("Z-end");

      topSurfaceCombo_.setFont(tahoma14Pt);
      topSurfaceCombo_.setModel(new SurfaceGridComboBoxModel(true, false));
      topSurfaceCombo_.addActionListener(evt -> topSurfaceComboActionPerformed(evt));

      bottomSurfaceCombo_.setFont(tahoma14Pt);
      bottomSurfaceCombo_.setModel(new SurfaceGridComboBoxModel(true, false));
      bottomSurfaceCombo_.addActionListener(evt -> bottomSurfaceComboActionPerformed(evt));

      umAboveTopSurfaceSpinner_.setModel(new SpinnerNumberModel(
            0.0d, 0.0d, null, 1.0d));
      umAboveTopSurfaceSpinner_.addChangeListener(evt -> umAboveTopSurfaceSpinnerStateChanged(evt));

      umAboveVolBetweenLabel_.setFont(tahoma14Pt);
      umAboveVolBetweenLabel_.setText("<html>&mu;m above</html>");

      umBelowBottomSurfaceSpinner_.setModel(new SpinnerNumberModel(
            0.0d, 0.0d, null, 1.0d));
      umBelowBottomSurfaceSpinner_.addChangeListener(
            evt -> umBelowBottomSurfaceSpinnerStateChanged(evt));

      umBelowVolBetweenLabel_.setFont(tahoma14Pt);
      umBelowVolBetweenLabel_.setText("<html>&mu;m below</html>");

      labelDiagram3d2Surface_.setIcon(new ImageIcon(getClass().getResource(
            "/org/micromanager/magellan/3d2surface.png"))); // NOI18N
      labelDiagram3d2Surface_.setBorder(new LineBorder(
            new java.awt.Color(0, 128, 0), 4, true));

      GroupLayout volumeBetweenZPanelLayout = new GroupLayout(
            volumeBetweenZPanel_);
      volumeBetweenZPanel_.setLayout(volumeBetweenZPanelLayout);
      volumeBetweenZPanelLayout.setHorizontalGroup(
            volumeBetweenZPanelLayout.createParallelGroup(
               GroupLayout.Alignment.LEADING)
            .addGroup(volumeBetweenZPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(volumeBetweenZPanelLayout.createParallelGroup(
                  GroupLayout.Alignment.LEADING)
               .addGroup(volumeBetweenZPanelLayout.createSequentialGroup()
                  .addComponent(topSurfaceLabel_)
                  .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(umAboveTopSurfaceSpinner_, GroupLayout.PREFERRED_SIZE, 71,
                        GroupLayout.PREFERRED_SIZE)
                  .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(umAboveVolBetweenLabel_, GroupLayout.PREFERRED_SIZE,
                        GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                  .addGroup(volumeBetweenZPanelLayout.createParallelGroup(
                        GroupLayout.Alignment.TRAILING, false)
                  .addComponent(topSurfaceCombo_, GroupLayout.Alignment.LEADING, 0,
                        GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                  .addComponent(bottomSurfaceCombo_, GroupLayout.Alignment.LEADING, 0,
                        GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                  .addGroup(GroupLayout.Alignment.LEADING,
                        volumeBetweenZPanelLayout.createSequentialGroup()
                     .addComponent(bottomSurfaceLabel_)
                     .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                     .addComponent(umBelowBottomSurfaceSpinner_, GroupLayout.PREFERRED_SIZE,
                           71, GroupLayout.PREFERRED_SIZE)
                     .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                     .addComponent(umBelowVolBetweenLabel_, GroupLayout.PREFERRED_SIZE,
                           GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))))
            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(labelDiagram3d2Surface_)
            .addGap(0, 0, 0))
      );
      volumeBetweenZPanelLayout.setVerticalGroup(
            volumeBetweenZPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(volumeBetweenZPanelLayout.createSequentialGroup()
            .addGroup(volumeBetweenZPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
               .addGroup(volumeBetweenZPanelLayout.createSequentialGroup()
                  .addGroup(volumeBetweenZPanelLayout.createParallelGroup(
                        GroupLayout.Alignment.BASELINE)
                     .addComponent(topSurfaceLabel_)
                     .addComponent(umAboveTopSurfaceSpinner_, GroupLayout.PREFERRED_SIZE,
                           GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                     .addComponent(umAboveVolBetweenLabel_, GroupLayout.PREFERRED_SIZE,
                           GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                  .addGap(3, 3, 3)
                  .addComponent(topSurfaceCombo_, GroupLayout.PREFERRED_SIZE,
                        GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                  .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                  .addGroup(volumeBetweenZPanelLayout.createParallelGroup(
                        GroupLayout.Alignment.BASELINE)
                     .addComponent(bottomSurfaceLabel_)
                     .addComponent(umBelowBottomSurfaceSpinner_,
                           GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE,
                           GroupLayout.PREFERRED_SIZE)
                     .addComponent(umBelowVolBetweenLabel_, GroupLayout.PREFERRED_SIZE,
                           GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                  .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(bottomSurfaceCombo_, GroupLayout.PREFERRED_SIZE,
                        GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
               .addGroup(volumeBetweenZPanelLayout.createSequentialGroup()
                  .addContainerGap()
                  .addComponent(labelDiagram3d2Surface_)))
            .addContainerGap(26, Short.MAX_VALUE))
      );

      acq3DSubtypePanel_.add(volumeBetweenZPanel_, "volumeBetween");

      distanceBelowSurfaceLabel_.setFont(tahoma14Pt);
      distanceBelowSurfaceLabel_.setText("Z-end");

      distanceBelowFixedSurfaceSpinner_.setFont(tahoma14Pt);
      distanceBelowFixedSurfaceSpinner_.setModel(new SpinnerNumberModel(0.0d, 0.0d, null, 0.001d));
      distanceBelowFixedSurfaceSpinner_.addChangeListener(
            evt -> distanceBelowFixedSurfaceSpinnerStateChanged(evt));

      distanceAboveSurfaceLabel_.setFont(tahoma14Pt);
      distanceAboveSurfaceLabel_.setText("Z-start");

      distanceAboveFixedSurfaceSpinner_.setFont(tahoma14Pt);
      distanceAboveFixedSurfaceSpinner_.setModel(new SpinnerNumberModel(0.0d, 0.0d, null, 0.001d));
      distanceAboveFixedSurfaceSpinner_.addChangeListener(
            evt -> distanceAboveFixedSurfaceSpinnerStateChanged(evt));

      umAboveLabel_.setFont(tahoma14Pt);
      umAboveLabel_.setText("<html>&mu;m above</html>");

      umBelowLabel_.setFont(tahoma14Pt);
      umBelowLabel_.setText("<html>&mu;m below</html>");

      fixedSurfaceLabel_.setFont(tahoma14Pt);
      fixedSurfaceLabel_.setText("Surface: ");

      fixedDistanceSurfaceComboBox_.setFont(tahoma14Pt);
      fixedDistanceSurfaceComboBox_.setModel(new SurfaceGridComboBoxModel(true, false));
      fixedDistanceSurfaceComboBox_.addActionListener(
            evt -> fixedDistanceSurfaceComboBoxActionPerformed(evt));

      labelDiagram3dSurface_.setIcon(new ImageIcon(getClass().getResource(
            "/org/micromanager/magellan/3dsurface.png"))); // NOI18N
      labelDiagram3dSurface_.setBorder(new LineBorder(new Color(0, 128, 0), 4, true));

      GroupLayout fixedDistanceZPanelLayout = new GroupLayout(fixedDistanceZPanel_);
      fixedDistanceZPanel_.setLayout(fixedDistanceZPanelLayout);
      fixedDistanceZPanelLayout.setHorizontalGroup(
            fixedDistanceZPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(fixedDistanceZPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(fixedDistanceZPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
               .addGroup(fixedDistanceZPanelLayout.createSequentialGroup()
                  .addGroup(fixedDistanceZPanelLayout.createParallelGroup(
                        GroupLayout.Alignment.LEADING)
                     .addGroup(GroupLayout.Alignment.TRAILING,
                           fixedDistanceZPanelLayout.createSequentialGroup()
                        .addComponent(distanceAboveSurfaceLabel_)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(distanceAboveFixedSurfaceSpinner_,
                              GroupLayout.PREFERRED_SIZE, 84, GroupLayout.PREFERRED_SIZE))
                     .addGroup(fixedDistanceZPanelLayout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(distanceBelowSurfaceLabel_, GroupLayout.PREFERRED_SIZE,
                              41, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(distanceBelowFixedSurfaceSpinner_,
                              GroupLayout.PREFERRED_SIZE,
                              81, GroupLayout.PREFERRED_SIZE)))
                  .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                  .addGroup(fixedDistanceZPanelLayout.createParallelGroup(
                        GroupLayout.Alignment.LEADING)
                     .addComponent(umAboveLabel_, GroupLayout.PREFERRED_SIZE,
                           GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                     .addComponent(umBelowLabel_, GroupLayout.PREFERRED_SIZE,
                           GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
               .addComponent(fixedSurfaceLabel_)
               .addComponent(fixedDistanceSurfaceComboBox_, GroupLayout.PREFERRED_SIZE,
                     203, GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(labelDiagram3dSurface_, GroupLayout.PREFERRED_SIZE, 270,
                  GroupLayout.PREFERRED_SIZE)
            .addGap(0, 0, 0))
      );
      fixedDistanceZPanelLayout.setVerticalGroup(
            fixedDistanceZPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(fixedDistanceZPanelLayout.createSequentialGroup()
            .addGroup(fixedDistanceZPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
               .addComponent(distanceAboveSurfaceLabel_)
               .addComponent(distanceAboveFixedSurfaceSpinner_, GroupLayout.PREFERRED_SIZE,
                     GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
               .addComponent(umAboveLabel_, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE,
                     GroupLayout.PREFERRED_SIZE))
            .addGap(3, 3, 3)
            .addGroup(fixedDistanceZPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
               .addComponent(distanceBelowSurfaceLabel_)
               .addComponent(distanceBelowFixedSurfaceSpinner_, GroupLayout.PREFERRED_SIZE,
                     GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
               .addComponent(umBelowLabel_, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE,
                     GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(fixedSurfaceLabel_)
            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(fixedDistanceSurfaceComboBox_, GroupLayout.PREFERRED_SIZE,
                  GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
            .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(fixedDistanceZPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addComponent(labelDiagram3dSurface_, GroupLayout.PREFERRED_SIZE, 125,
                  GroupLayout.PREFERRED_SIZE)
            .addContainerGap(34, Short.MAX_VALUE))
      );

      addTextEditListener(distanceBelowFixedSurfaceSpinner_);
      addTextEditListener(distanceAboveFixedSurfaceSpinner_);

      acq3DSubtypePanel_.add(fixedDistanceZPanel_, "fixedDistance");

      zStepLabel_.setFont(tahoma14Pt); // NOI18N
      zStepLabel_.setText("<html>Z-step (&mu;m):</html>");

      zStepSpinner_.setFont(tahoma14Pt); // NOI18N
      zStepSpinner_.setModel(new SpinnerNumberModel(1.0d, null, null,
            1.0d));
      zStepSpinner_.addChangeListener(new javax.swing.event.ChangeListener() {
         public void stateChanged(javax.swing.event.ChangeEvent evt) {
            zStepSpinnerStateChanged(evt);
         }
      });

      acqOrderLabel_.setText("Order:");

      acqOrderCombo_.setModel(new DefaultComboBoxModel<>(new String[]
               { "Channel, Z", "Z, Channel" }));
      acqOrderCombo_.addActionListener(evt -> acqOrderComboActionPerformed(evt));

      zStackModeButtonGroup_.add(withinDistanceFromSurfacesButton_);
      withinDistanceFromSurfacesButton_.setSelected(true);
      withinDistanceFromSurfacesButton_.setText("<html>Within distance<br>from surface");
      withinDistanceFromSurfacesButton_.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            withinDistanceFromSurfacesButtonActionPerformed(evt);
         }
      });

      zStackModeButtonGroup_.add(volumeBetweenSurfacesButton_);
      volumeBetweenSurfacesButton_.setText("Between surfaces");
      volumeBetweenSurfacesButton_.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            volumeBetweenSurfacesButtonActionPerformed(evt);
         }
      });

      zStackModeButtonGroup_.add(cuboidVolumeButton_);
      cuboidVolumeButton_.setText("Cuboid");
      cuboidVolumeButton_.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            cuboidVolumeButtonActionPerformed(evt);
         }
      });

      GroupLayout panel3DControlsSpecificLayout = new GroupLayout(panel3DControlsSpecific_);
      panel3DControlsSpecific_.setLayout(panel3DControlsSpecificLayout);
      panel3DControlsSpecificLayout.setHorizontalGroup(
            panel3DControlsSpecificLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(panel3DControlsSpecificLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(panel3DControlsSpecificLayout.createParallelGroup(
                  GroupLayout.Alignment.LEADING)
               .addGroup(panel3DControlsSpecificLayout.createSequentialGroup()
                  .addComponent(zStepLabel_, GroupLayout.PREFERRED_SIZE,
                        GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                  .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(zStepSpinner_, GroupLayout.PREFERRED_SIZE, 77,
                        GroupLayout.PREFERRED_SIZE))
               .addGroup(panel3DControlsSpecificLayout.createSequentialGroup()
                  .addComponent(acqOrderLabel_)
                  .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED,
                        GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                  .addComponent(acqOrderCombo_, GroupLayout.PREFERRED_SIZE, 119,
                        GroupLayout.PREFERRED_SIZE))
               .addComponent(cuboidVolumeButton_)
               .addComponent(volumeBetweenSurfacesButton_)
               .addComponent(withinDistanceFromSurfacesButton_, GroupLayout.PREFERRED_SIZE,
                     GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED,
                  GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(acq3DSubtypePanel_, GroupLayout.DEFAULT_SIZE, 502, Short.MAX_VALUE)
            .addContainerGap())
      );
      panel3DControlsSpecificLayout.setVerticalGroup(
             panel3DControlsSpecificLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(panel3DControlsSpecificLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(panel3DControlsSpecificLayout.createParallelGroup(
                  GroupLayout.Alignment.TRAILING, false)
               .addComponent(acq3DSubtypePanel_, GroupLayout.Alignment.LEADING,
                     GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
               .addGroup(panel3DControlsSpecificLayout.createSequentialGroup()
                  .addGroup(panel3DControlsSpecificLayout.createParallelGroup(
                        GroupLayout.Alignment.BASELINE)
                     .addComponent(zStepLabel_, GroupLayout.PREFERRED_SIZE,
                           GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                     .addComponent(zStepSpinner_, GroupLayout.PREFERRED_SIZE,
                           GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                  .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                  .addGroup(panel3DControlsSpecificLayout.createParallelGroup(
                        GroupLayout.Alignment.BASELINE)
                     .addComponent(acqOrderLabel_)
                     .addComponent(acqOrderCombo_, GroupLayout.PREFERRED_SIZE,
                           GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                  .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(cuboidVolumeButton_)
                  .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(volumeBetweenSurfacesButton_)
                  .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(withinDistanceFromSurfacesButton_, GroupLayout.PREFERRED_SIZE,
                        GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
            .addContainerGap(9, Short.MAX_VALUE))
      );

      addTextEditListener(zStepSpinner_);

      controls2DOr3D_.add(panel3DControlsSpecific_, "3D");

      footprin2DLabel_.setFont(tahoma14Pt);
      footprin2DLabel_.setText("XY stage positions from:");

      xyFootprintComboBox_.setFont(tahoma14Pt);
      xyFootprintComboBox_.setModel(new SurfaceGridComboBoxModel(false, false));
      xyFootprintComboBox_.addActionListener(evt -> xyFootprintComboBoxActionPerformed(evt));

      GroupLayout spacetabLayout = new GroupLayout(spaceTab_);
      spaceTab_.setLayout(spacetabLayout);
      spacetabLayout.setHorizontalGroup(
            spacetabLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GroupLayout.Alignment.TRAILING, spacetabLayout.createSequentialGroup()
            .addGroup(spacetabLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
               .addGroup(spacetabLayout.createSequentialGroup()
                  .addComponent(button3D_)
                  .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(button2D_)
                  .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(footprin2DLabel_)
                  .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(xyFootprintComboBox_, GroupLayout.PREFERRED_SIZE, 333,
                        GroupLayout.PREFERRED_SIZE))
               .addGroup(spacetabLayout.createSequentialGroup()
                  .addContainerGap()
                  .addComponent(controls2DOr3D_, GroupLayout.PREFERRED_SIZE,
                        GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
            .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );
      spacetabLayout.setVerticalGroup(
            spacetabLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(spacetabLayout.createSequentialGroup()
            .addGroup(spacetabLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
               .addComponent(button3D_)
               .addComponent(button2D_)
               .addComponent(footprin2DLabel_)
               .addComponent(xyFootprintComboBox_, GroupLayout.PREFERRED_SIZE,
                     GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(controls2DOr3D_, GroupLayout.PREFERRED_SIZE, 180,
                  GroupLayout.PREFERRED_SIZE)
            .addContainerGap())
      );

      acqTabbedPane_.addTab("Space", spaceTab_);

      jScrollPane1.setFont(tahoma14Pt);

      channelsTable_.setModel(new SimpleChannelTableModel(null)
      );
      channelsTable_.getTableHeader().addMouseListener(new MouseAdapter() {
         @Override
         public void mouseClicked(MouseEvent e) {
            int col = channelsTable_.columnAtPoint(e.getPoint());
            if (col == 0) {
               //Select all
               ((SimpleChannelTableModel) channelsTable_.getModel()).selectAllChannels();
            } else if (col == 2) {
               //set all exposures to exposure of first
               ((SimpleChannelTableModel) channelsTable_.getModel()).synchronizeExposures();
            }
         }
      });
      jScrollPane1.setViewportView(channelsTable_);

      jLabel3.setFont(tahoma14Pt);
      jLabel3.setText("Channel group:");

      channelGroupCombo.setFont(tahoma14Pt);
      channelGroupCombo.setModel(new ChannelComboBoxModel());
      channelGroupCombo.addActionListener(evt -> channelGroupComboActionPerformed(evt));

      jButton1.setText("Select all");
      jButton1.setToolTipText("Select or deselect all channels");
      jButton1.addActionListener(evt -> jButton1ActionPerformed(evt));

      syncExposuresButton_.setText("Sync exposures");
      syncExposuresButton_.setToolTipText("Make all exposures equal to the top channel exposures");
      syncExposuresButton_.addActionListener(evt -> syncExposuresButtonActionPerformed(evt));

      GroupLayout channelsTabLayout = new GroupLayout(channelsTab);
      channelsTab.setLayout(channelsTabLayout);
      channelsTabLayout.setHorizontalGroup(
            channelsTabLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(channelsTabLayout.createSequentialGroup()
            .addComponent(jLabel3)
            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(channelGroupCombo, GroupLayout.PREFERRED_SIZE, 171,
                  GroupLayout.PREFERRED_SIZE)
            .addGap(35, 35, 35)
            .addComponent(jButton1)
            .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(syncExposuresButton_)
            .addGap(0, 165, Short.MAX_VALUE))
      );
      channelsTabLayout.setVerticalGroup(
            channelsTabLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GroupLayout.Alignment.TRAILING, channelsTabLayout.createSequentialGroup()
            .addGroup(channelsTabLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel3)
               .addComponent(channelGroupCombo, GroupLayout.PREFERRED_SIZE,
                     GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
               .addComponent(jButton1)
               .addComponent(syncExposuresButton_))
            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 192, Short.MAX_VALUE))
      );

      acqTabbedPane_.addTab("Channels", channelsTab);

      timeIntevalUnitCombo_.setFont(tahoma14Pt);
      timeIntevalUnitCombo_.setModel(new DefaultComboBoxModel(new String[]{"ms", "s", "min"}));
      timeIntevalUnitCombo_.addActionListener(evt -> timeIntervalUnitComboActionPerformed(evt));

      timeIntervalLabel_.setFont(tahoma14Pt);
      timeIntervalLabel_.setText("Interval");

      numTimePointsLabel_.setFont(tahoma14Pt);
      numTimePointsLabel_.setText("Number");

      numTimePointsSpinner_.setFont(tahoma14Pt);
      numTimePointsSpinner_.setModel(new SpinnerNumberModel(1, 1, null, 1));
      numTimePointsSpinner_.addChangeListener(evt -> numTimePointsSpinnerStateChanged(evt));

      timeIntervalSpinner_.setFont(tahoma14Pt); // NOI18N
      timeIntervalSpinner_.setModel(new SpinnerNumberModel(0.0d, 0.0d, null, 1.0d));
      timeIntervalSpinner_.addChangeListener(evt -> timeIntervalSpinnerStateChanged(evt));

      GroupLayout timePointsPanelLayout = new GroupLayout(timePointsPanel_);
      timePointsPanel_.setLayout(timePointsPanelLayout);
      timePointsPanelLayout.setHorizontalGroup(
            timePointsPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(timePointsPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(timePointsPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING,
                        false)
               .addGroup(timePointsPanelLayout.createSequentialGroup()
                  .addComponent(timeIntervalLabel_)
                  .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                  .addComponent(timeIntervalSpinner_))
               .addGroup(timePointsPanelLayout.createSequentialGroup()
                  .addComponent(numTimePointsLabel_)
                  .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(numTimePointsSpinner_, GroupLayout.PREFERRED_SIZE, 87,
                        GroupLayout.PREFERRED_SIZE)))
            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(timeIntevalUnitCombo_, GroupLayout.PREFERRED_SIZE, 78,
                  GroupLayout.PREFERRED_SIZE)
            .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );
      timePointsPanelLayout.setVerticalGroup(
            timePointsPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(timePointsPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(timePointsPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
               .addComponent(numTimePointsLabel_)
               .addComponent(numTimePointsSpinner_, GroupLayout.PREFERRED_SIZE,
                     GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(timePointsPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
               .addComponent(timeIntervalLabel_)
               .addComponent(timeIntervalSpinner_, GroupLayout.PREFERRED_SIZE,
                     GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
               .addComponent(timeIntevalUnitCombo_, GroupLayout.PREFERRED_SIZE, 28,
                     GroupLayout.PREFERRED_SIZE))
            .addGap(0, 9, Short.MAX_VALUE))
      );

      addTextEditListener(numTimePointsSpinner_);
      addTextEditListener(timeIntervalSpinner_);

      timePointsCheckBox_.setFont(tahoma14Pt); // NOI18N
      timePointsCheckBox_.setText("Use time points");
      timePointsCheckBox_.addActionListener(evt -> timePointsCheckBoxActionPerformed(evt));

      GroupLayout timePointsTabLayout = new GroupLayout(timePointsTab_);
      timePointsTab_.setLayout(timePointsTabLayout);
      timePointsTabLayout.setHorizontalGroup(
            timePointsTabLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(timePointsTabLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(timePointsTabLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
               .addComponent(timePointsPanel_, GroupLayout.PREFERRED_SIZE,
                     GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
               .addComponent(timePointsCheckBox_))
            .addContainerGap(454, Short.MAX_VALUE))
      );
      timePointsTabLayout.setVerticalGroup(
            timePointsTabLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(timePointsTabLayout.createSequentialGroup()
            .addGap(6, 6, 6)
            .addComponent(timePointsCheckBox_)
            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(timePointsPanel_, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE,
                  GroupLayout.PREFERRED_SIZE)
            .addContainerGap(114, Short.MAX_VALUE))
      );

      for (Component c : timePointsPanel_.getComponents()) {
         c.setEnabled(false);
      }

      acqTabbedPane_.addTab("Time", timePointsTab_);

      runAcqButton_.setFont(new Font("Tahoma", 1, 14)); // NOI18N
      runAcqButton_.setText("Run acquisition(s)");
      runAcqButton_.addActionListener(evt -> runAcqButtonActionPerformed(evt));

      estDurationLabel_.setText("Estimated duration: ");

      estSizeLabel_.setText("Estimated size: ");

      GroupLayout runAcqPanelLayout = new GroupLayout(runAcqPanel_);
      runAcqPanel_.setLayout(runAcqPanelLayout);
      runAcqPanelLayout.setHorizontalGroup(
            runAcqPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(runAcqPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(runAcqPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
               .addComponent(estDurationLabel_, GroupLayout.DEFAULT_SIZE,
                     GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
               .addComponent(estSizeLabel_, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE,
                     Short.MAX_VALUE))
            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(runAcqButton_)
            .addGap(303, 303, 303))
      );
      runAcqPanelLayout.setVerticalGroup(
            runAcqPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(runAcqPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(runAcqPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
               .addGroup(runAcqPanelLayout.createSequentialGroup()
                  .addComponent(estDurationLabel_)
                  .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED,
                        GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                  .addComponent(estSizeLabel_))
               .addComponent(runAcqButton_, GroupLayout.PREFERRED_SIZE, 44,
                     GroupLayout.PREFERRED_SIZE))
            .addContainerGap())
      );

      multipleAcqScrollPane_.setFont(tahoma14Pt); // NOI18N

      multipleAcqTable_.setModel(new MultipleAcquisitionTableModel(multiAcqManager_, this));
      multipleAcqTable_.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
      multipleAcqScrollPane_.setViewportView(multipleAcqTable_);

      moveAcqUpButton_.setFont(tahoma14Pt); // NOI18N
      moveAcqUpButton_.setIcon(new ImageIcon(getClass().getResource(
            "/org/micromanager/magellan/arrow_up.png"))); // NOI18N
      moveAcqUpButton_.addActionListener(evt -> moveAcqUpButtonActionPerformed(evt));

      removeAcqButton_.setIcon(new ImageIcon(getClass().getResource(
            "/org/micromanager/icons/minus.png"))); // NOI18N
      removeAcqButton_.addActionListener(evt -> removeAcqButtonActionPerformed(evt));

      moveAcqDownButton_.setFont(tahoma14Pt); // NOI18N
      moveAcqDownButton_.setIcon(new ImageIcon(getClass().getResource(
            "/org/micromanager/magellan/arrow_down.png"))); // NOI18N
      moveAcqDownButton_.addActionListener(evt -> moveAcqDownButtonActionPerformed(evt));

      addAcqButton_.setIcon(new ImageIcon(getClass().getResource(
            "/org/micromanager/icons/plus.png"))); // NOI18N
      addAcqButton_.addActionListener(evt -> addAcqButtonActionPerformed(evt));

      GroupLayout jPanel3Layout = new GroupLayout(jPanel3);
      jPanel3.setLayout(jPanel3Layout);
      jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel3Layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
               .addComponent(moveAcqUpButton_, GroupLayout.DEFAULT_SIZE,
                     GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
               .addComponent(addAcqButton_, GroupLayout.PREFERRED_SIZE, 46,
                     GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel3Layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
               .addComponent(moveAcqDownButton_, GroupLayout.DEFAULT_SIZE,
                     GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
               .addComponent(removeAcqButton_, GroupLayout.PREFERRED_SIZE, 46,
                     GroupLayout.PREFERRED_SIZE))
            .addContainerGap())
      );
      jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel3Layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
               .addComponent(removeAcqButton_, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE,
                     Short.MAX_VALUE)
               .addComponent(addAcqButton_, GroupLayout.PREFERRED_SIZE, 36,
                     GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(jPanel3Layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
               .addComponent(moveAcqUpButton_, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE,
                     Short.MAX_VALUE)
               .addComponent(moveAcqDownButton_))
            .addContainerGap())
      );

      GroupLayout jPanel2Layout = new GroupLayout(jPanel2);
      jPanel2.setLayout(jPanel2Layout);
      jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
            .addComponent(multipleAcqScrollPane_, GroupLayout.DEFAULT_SIZE, 574, Short.MAX_VALUE)
            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jPanel3, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE,
                  GroupLayout.PREFERRED_SIZE))
      );
      jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(multipleAcqScrollPane_, GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
            .addComponent(jPanel3, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE,
                  GroupLayout.PREFERRED_SIZE)
            .addGap(0, 62, Short.MAX_VALUE))
      );

      GroupLayout acqPanelLayout = new GroupLayout(acqPanel);
      acqPanel.setLayout(acqPanelLayout);
      acqPanelLayout.setHorizontalGroup(
            acqPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(acqPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(acqPanelLayout.createParallelGroup(GroupLayout.Alignment.TRAILING)
               .addComponent(runAcqPanel_, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE,
                     GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
               .addComponent(acqTabbedPane_, GroupLayout.Alignment.LEADING)
               .addGroup(GroupLayout.Alignment.LEADING, acqPanelLayout.createSequentialGroup()
                  .addComponent(jPanel2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE,
                        GroupLayout.PREFERRED_SIZE)
                  .addGap(0, 0, Short.MAX_VALUE)))
            .addContainerGap())
      );
      acqPanelLayout.setVerticalGroup(
            acqPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(acqPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jPanel2, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE,
                  Short.MAX_VALUE)
            .addGap(18, 18, 18)
            .addComponent(acqTabbedPane_, GroupLayout.PREFERRED_SIZE, 255,
                  GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(runAcqPanel_, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE,
                  GroupLayout.PREFERRED_SIZE)
            .addContainerGap())
      );

      exploreAcqTabbedPane_.addTab("Acquisition(s)", acqPanel);

      userGuideLink_.setFont(tahoma14Pt); // NOI18N
      userGuideLink_.setForeground(new Color(153, 204, 255));
      userGuideLink_.setText("Micro-Magellan User Guide");

      citeLink_.setFont(tahoma14Pt); // NOI18N
      citeLink_.setForeground(new Color(153, 204, 255));
      citeLink_.setText("Cite Micro-Magellan");

      bugReportLink_.setFont(tahoma14Pt); // NOI18N
      bugReportLink_.setForeground(new Color(153, 204, 255));
      bugReportLink_.setText("Report a bug");

      userGuideLink_.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
      Font font = userGuideLink_.getFont();
      Map attributes = font.getAttributes();
      attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
      userGuideLink_.setFont(font.deriveFont(attributes));
      citeLink_.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
      Font font3 = citeLink_.getFont();
      Map attributes3 = font3.getAttributes();
      attributes3.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
      citeLink_.setFont(font3.deriveFont(attributes3));
      bugReportLink_.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
      Font font2 = bugReportLink_.getFont();
      Map attributes2 = font2.getAttributes();
      attributes2.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
      bugReportLink_.setFont(font2.deriveFont(attributes2));

      GroupLayout bottomPanelLayout = new GroupLayout(bottomPanel_);
      bottomPanel_.setLayout(bottomPanelLayout);
      bottomPanelLayout.setHorizontalGroup(
            bottomPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(bottomPanelLayout.createSequentialGroup()
            .addComponent(userGuideLink_)
            .addGap(82, 82, 82)
            .addComponent(citeLink_)
            .addGap(119, 119, 119)
            .addComponent(bugReportLink_)
            .addContainerGap(143, Short.MAX_VALUE))
      );
      bottomPanelLayout.setVerticalGroup(
            bottomPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(bottomPanelLayout.createSequentialGroup()
            .addContainerGap(14, Short.MAX_VALUE)
            .addGroup(bottomPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
               .addComponent(citeLink_)
               .addComponent(userGuideLink_)
               .addComponent(bugReportLink_)))
      );

      freeDiskSpaceLabel_.setText("Available disk space: ");
      freeDiskSpaceLabel_.setToolTipText("");

      openDatasetButton_.setFont(tahoma14Pt); // NOI18N
      openDatasetButton_.setText("Open dataset");
      openDatasetButton_.addActionListener(evt -> openDatasetButtonActionPerformed(evt));

      exploreBrowseButton_.setFont(tahoma14Pt); // NOI18N
      exploreBrowseButton_.setText("Browse");
      exploreBrowseButton_.addActionListener(evt -> exploreBrowseButtonActionPerformed(evt));

      exploreSavingDirLabel_.setFont(tahoma14Pt); // NOI18N
      exploreSavingDirLabel_.setText("Saving directory: ");

      globalSavingDirTextField_.setFont(tahoma14Pt); // NOI18N
      globalSavingDirTextField_.setText("jTextField1");

      overlapLabel_.setFont(tahoma14Pt); // NOI18N
      overlapLabel_.setText("XY tile overlap:");

      tileOverlapSpinner_.setFont(tahoma14Pt); // NOI18N
      tileOverlapSpinner_.setModel(new SpinnerNumberModel(
            0.0d, 0.0d, 99.0d, 1.0d));
      tileOverlapSpinner_.addChangeListener(evt -> tileOverlapSpinnerStateChanged(evt));

      percentLabel_.setFont(tahoma14Pt);
      percentLabel_.setText("%");

      GroupLayout jPanel1Layout = new GroupLayout(jPanel1);
      jPanel1.setLayout(jPanel1Layout);
      jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
            .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
               .addGroup(jPanel1Layout.createSequentialGroup()
                  .addComponent(exploreSavingDirLabel_)
                  .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(globalSavingDirTextField_, GroupLayout.PREFERRED_SIZE, 578,
                        GroupLayout.PREFERRED_SIZE))
               .addGroup(jPanel1Layout.createSequentialGroup()
                  .addContainerGap()
                  .addComponent(overlapLabel_)
                  .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(tileOverlapSpinner_, GroupLayout.PREFERRED_SIZE, 65,
                        GroupLayout.PREFERRED_SIZE)
                  .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(percentLabel_)
                  .addGap(56, 56, 56)
                  .addComponent(freeDiskSpaceLabel_, GroupLayout.PREFERRED_SIZE, 197,
                        GroupLayout.PREFERRED_SIZE)
                  .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED,
                        GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                  .addComponent(openDatasetButton_)
                  .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(exploreBrowseButton_)))
            .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );
      jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
               .addComponent(exploreSavingDirLabel_, GroupLayout.DEFAULT_SIZE,
                     GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
               .addComponent(globalSavingDirTextField_, GroupLayout.PREFERRED_SIZE,
                     GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
               .addComponent(openDatasetButton_)
               .addComponent(exploreBrowseButton_)
               .addComponent(freeDiskSpaceLabel_)
               .addComponent(overlapLabel_)
               .addComponent(tileOverlapSpinner_, GroupLayout.PREFERRED_SIZE,
                     GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
               .addComponent(percentLabel_))
            .addContainerGap())
      );

      GroupLayout rootPanelLayout = new GroupLayout(rootPanel_);
      rootPanel_.setLayout(rootPanelLayout);
      rootPanelLayout.setHorizontalGroup(
            rootPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(rootPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(rootPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
               .addComponent(exploreAcqTabbedPane_, GroupLayout.PREFERRED_SIZE, 714,
                     GroupLayout.PREFERRED_SIZE)
               .addComponent(jPanel1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE,
                     Short.MAX_VALUE)
               .addComponent(bottomPanel_, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE,
                     GroupLayout.PREFERRED_SIZE))
            .addContainerGap())
      );
      rootPanelLayout.setVerticalGroup(
            rootPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GroupLayout.Alignment.TRAILING, rootPanelLayout.createSequentialGroup()
            .addComponent(jPanel1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE,
                  GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(exploreAcqTabbedPane_, GroupLayout.DEFAULT_SIZE,
                  GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(bottomPanel_, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE,
                  GroupLayout.PREFERRED_SIZE)
            .addContainerGap())
      );

      getContentPane().add(rootPanel_);

      pack();
   } // </editor-fold>//GEN-END:initComponents

   private void runAcqButtonActionPerformed(ActionEvent evt) {
      if (acquisitionRunning_) {
         multiAcqManager_.abort();
      } else {
         multiAcqManager_.runAllAcquisitions();
      }
   }

   private void newExploreWindowButtonActionPerformed(ActionEvent evt) {
      boolean useZ = exploreUseZCheckBox_.isSelected();
      double zStep = ((Number) exploreZStepSpinner_.getValue()).doubleValue();
      double overlap = (Double) tileOverlapSpinner_.getValue();
      String dir = globalSavingDirTextField_.getText();
      String name = exploreSavingNameTextField_.getText();
      String cGroup = (String) exploreChannelGroupCombo_.getSelectedItem();


      //now that explore acquisition is being run, store values
      settings_.getPrefs().putBoolean(EXPLORE_USE_Z, useZ);
      settings_.getPrefs().putString(EXPLORE_DIR_PREF, dir);
      settings_.getPrefs().putString(EXPLORE_NAME_PREF, name);
      settings_.getPrefs().putDouble(EXPLORE_Z_STEP, zStep);
      settings_.getPrefs().putDouble(EXPLORE_TILE_OVERLAP, overlap);

      MagellanAcquisitionsManager.getInstance().createExploreAcquisition(studio_, useZ, zStep,
              overlap, dir, name, cGroup, true);
   }

   private void exploreBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {
      //GEN-FIRST:event_exploreBrowseButton_ActionPerformed
      String root = "";
      if (globalSavingDirTextField_.getText() != null
            && !globalSavingDirTextField_.getText().equals("")) {
         root = globalSavingDirTextField_.getText();
      }
      JFileChooser chooser = new JFileChooser(root);
      chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
      int option = chooser.showSaveDialog(this);
      if (option != JFileChooser.APPROVE_OPTION) {
         return;
      }
      File f = chooser.getSelectedFile();
      if (!f.isDirectory()) {
         f = f.getParentFile();
      }
      globalSavingDirTextField_.setText(f.getAbsolutePath());
      acquisitionSettingsChanged();
   } //GEN-LAST:event_exploreBrowseButton_ActionPerformed

   private void exploreSavingNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {
      //GEN-FIRST:event_exploreSavingNameTextField_ActionPerformed
   } //GEN-LAST:event_exploreSavingNameTextField_ActionPerformed

   private void openDatasetButtonActionPerformed(java.awt.event.ActionEvent evt) {
      //GEN-FIRST:event_openDatasetButton_ActionPerformed
      File selectedFile = null;
      if (JavaUtils.isMac()) {
         System.setProperty("apple.awt.fileDialogForDirectories", "true");
         FileDialog fd = new FileDialog(this, "Select Magellan dataset to load", FileDialog.LOAD);

         fd.setVisible(true);
         if (fd.getFile() != null) {
            selectedFile = new File(fd.getDirectory() + File.separator + fd.getFile());
            selectedFile = new File(selectedFile.getAbsolutePath());
         }
         fd.dispose();
         System.setProperty("apple.awt.fileDialogForDirectories", "false");
      } else {
         JFileChooser fc = new JFileChooser(globalSavingDirTextField_.getText());
         fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
         fc.setDialogTitle("Select Magellan dataset to load");
         int returnVal = fc.showOpenDialog(this);
         if (returnVal == JFileChooser.APPROVE_OPTION) {
            selectedFile = fc.getSelectedFile();
         }
      }
      if (selectedFile == null) {
         return; //canceled
      }
      final File finalFile = selectedFile;
      new Thread(() -> {
         //TODO
         new LoadedAcquisitionData(finalFile.toString());
      }).start();

   } //GEN-LAST:event_openDatasetButton_ActionPerformed

   private void moveAcqDownButtonActionPerformed(java.awt.event.ActionEvent evt) {
      //GEN-FIRST:event_moveAcqDownButton_ActionPerformed
      int move = multiAcqManager_.moveDown(multipleAcqTable_.getSelectedRow());
      multipleAcqTable_.getSelectionModel().setSelectionInterval(multiAcqSelectedIndex_ + move,
            multiAcqSelectedIndex_ + move);
      multipleAcqTable_.repaint();
   } //GEN-LAST:event_moveAcqDownButton_ActionPerformed

   private void moveAcqUpButtonActionPerformed(java.awt.event.ActionEvent evt) {
      //GEN-FIRST:event_moveAcqUpButton_ActionPerformed
      int move = multiAcqManager_.moveUp(multipleAcqTable_.getSelectedRow());
      multipleAcqTable_.getSelectionModel().setSelectionInterval(multiAcqSelectedIndex_ + move,
            multiAcqSelectedIndex_ + move);
      multipleAcqTable_.repaint();
   } //GEN-LAST:event_moveAcqUpButton_ActionPerformed

   private void channelGroupComboActionPerformed(java.awt.event.ActionEvent evt) {
      //GEN-FIRST:event_ChannelGroupCombo_ActionPerformed
      //update the current channels object displayed in the GUI
      multiAcqManager_.getAcquisitionSettings(multiAcqSelectedIndex_).setChannelGroup(
              (String) channelGroupCombo.getSelectedItem());
      multiAcqManager_.getAcquisitionSettings(multiAcqSelectedIndex_).channels_
            .updateChannelGroup((String) channelGroupCombo.getSelectedItem());
      acquisitionSettingsChanged();
   } //GEN-LAST:event_ChannelGroupCombo_ActionPerformed

   private void acqOrderComboActionPerformed(java.awt.event.ActionEvent evt) {
      //GEN-FIRST:event_acqOrderCombo_ActionPerformed
      acquisitionSettingsChanged();
   } //GEN-LAST:event_acqOrderCombo_ActionPerformed

   private void zStepSpinnerStateChanged(ChangeEvent evt) {
      //GEN-FIRST:event_zStepSpinner_StateChanged
      acquisitionSettingsChanged();
   } //GEN-LAST:event_zStepSpinner_StateChanged

   private void collectionPlaneComboActionPerformed(ActionEvent evt) {
      //GEN-FIRST:event_collectionPlaneCombo_ActionPerformed
      acquisitionSettingsChanged();
   } //GEN-LAST:event_collectionPlaneCombo_ActionPerformed

   private void xyFootprintComboBoxActionPerformed(ActionEvent evt) {
      //GEN-FIRST:event_xyFootprintComboBox_ActionPerformed
      acquisitionSettingsChanged();
   } //GEN-LAST:event_xyFootprintComboBox_ActionPerformed

   private void fixedDistanceSurfaceComboBoxActionPerformed(ActionEvent evt) {
      //GEN-FIRST:event_fixedDistanceSurfaceComboBox_ActionPerformed
      acquisitionSettingsChanged();
   } //GEN-LAST:event_fixedDistanceSurfaceComboBox_ActionPerformed

   private void distanceAboveFixedSurfaceSpinnerStateChanged(ChangeEvent evt) {
      //GEN-FIRST:event_distanceAboveFixedSurfaceSpinner_StateChanged
      acquisitionSettingsChanged();
   } //GEN-LAST:event_distanceAboveFixedSurfaceSpinner_StateChanged

   private void distanceBelowFixedSurfaceSpinnerStateChanged(ChangeEvent evt) {
      //GEN-FIRST:event_distanceBelowFixedSurfaceSpinner_StateChanged
      acquisitionSettingsChanged();
   } //GEN-LAST:event_distanceBelowFixedSurfaceSpinner_StateChanged

   private void umBelowBottomSurfaceSpinnerStateChanged(ChangeEvent evt) {
      //GEN-FIRST:event_umBelowBottomSurfaceSpinner_StateChanged
      acquisitionSettingsChanged();
   } //GEN-LAST:event_umBelowBottomSurfaceSpinner_StateChanged

   private void umAboveTopSurfaceSpinnerStateChanged(ChangeEvent evt) {
      //GEN-FIRST:event_umAboveTopSurfaceSpinner_StateChanged
      acquisitionSettingsChanged();
   } //GEN-LAST:event_umAboveTopSurfaceSpinner_StateChanged

   private void bottomSurfaceComboActionPerformed(java.awt.event.ActionEvent evt) {
      //GEN-FIRST:event_bottomSurfaceCombo_ActionPerformed
      acquisitionSettingsChanged();
   } //GEN-LAST:event_bottomSurfaceCombo_ActionPerformed

   private void topSurfaceComboActionPerformed(java.awt.event.ActionEvent evt) {
      //GEN-FIRST:event_topSurfaceCombo_ActionPerformed
      acquisitionSettingsChanged();
   } //GEN-LAST:event_topSurfaceCombo_ActionPerformed

   private void zEndSpinnerStateChanged(ChangeEvent evt) {
      //GEN-FIRST:event_zEndSpinner_StateChanged
      acquisitionSettingsChanged();
   } //GEN-LAST:event_zEndSpinner_StateChanged

   private void zStartSpinnerStateChanged(ChangeEvent evt) {
      //GEN-FIRST:event_zStartSpinner_StateChanged
      acquisitionSettingsChanged();
   } //GEN-LAST:event_zStartSpinner_StateChanged

   private void timePointsCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {
      //GEN-FIRST:event_timePointsCheckBox_ActionPerformed
      for (Component c : timePointsPanel_.getComponents()) {
         c.setEnabled(timePointsCheckBox_.isSelected());
      }
      acquisitionSettingsChanged();
   } //GEN-LAST:event_timePointsCheckBox_ActionPerformed

   private void timeIntervalSpinnerStateChanged(ChangeEvent evt) {
      //GEN-FIRST:event_timeIntervalSpinner_StateChanged
      acquisitionSettingsChanged();
   } //GEN-LAST:event_timeIntervalSpinner_StateChanged

   private void numTimePointsSpinnerStateChanged(ChangeEvent evt) {
      //GEN-FIRST:event_numTimePointsSpinner_StateChanged
      acquisitionSettingsChanged();
   } //GEN-LAST:event_numTimePointsSpinner_StateChanged

   private void timeIntervalUnitComboActionPerformed(java.awt.event.ActionEvent evt) {
      //GEN-FIRST:event_timeIntevalUnitCombo_ActionPerformed
      acquisitionSettingsChanged();
   } //GEN-LAST:event_timeIntevalUnitCombo_ActionPerformed

   private void deleteAllRegionsButtonActionPerformed(java.awt.event.ActionEvent evt) {
      //GEN-FIRST:event_deleteAllRegionsButton_ActionPerformed
      manager_.deleteAll();
   } //GEN-LAST:event_deleteAllRegionsButton_ActionPerformed

   private void deleteSelectedRegionButtonActionPerformed(java.awt.event.ActionEvent evt) {
      //GEN-FIRST:event_deleteSelectedRegionButton_ActionPerformed
      if (surfacesAndGridsTable_.getSelectedRow() != -1) {
         manager_.delete(surfacesAndGridsTable_.getSelectedRow());
      }
   } //GEN-LAST:event_deleteSelectedRegionButton_ActionPerformed

   private void setCurrentZStartButtonActionPerformed(java.awt.event.ActionEvent evt) {
      //GEN-FIRST:event_setCurrentZStartButton_ActionPerformed
      MagellanGUIAcquisitionSettings settings = multiAcqManager_.getAcquisitionSettings(
            multiAcqSelectedIndex_);
      try {
         settings.zStart_ = Magellan.getCore().getPosition();
         zStartSpinner_.setValue(settings.zStart_);
      } catch (Exception ex) {
         Log.log(ex);
      }
      acquisitionSettingsChanged();
   } //GEN-LAST:event_setCurrentZStartButton_ActionPerformed

   private void setCurrentZEndButtonActionPerformed(java.awt.event.ActionEvent evt) {
      //GEN-FIRST:event_setCurrentZEndButton_ActionPerformed
      MagellanGUIAcquisitionSettings settings = multiAcqManager_.getAcquisitionSettings(
            multiAcqSelectedIndex_);
      try {
         settings.zEnd_ = Magellan.getCore().getPosition();
         zEndSpinner_.setValue(settings.zEnd_);
      } catch (Exception ex) {
         Log.log(ex);
      }
      acquisitionSettingsChanged();
   } //GEN-LAST:event_setCurrentZEndButton_ActionPerformed

   private void noCollectionPlaneButtonActionPerformed(java.awt.event.ActionEvent evt) {
      //GEN-FIRST:event_noCollectionPlaneButton_ActionPerformed
      acquisitionSettingsChanged();
   } //GEN-LAST:event_noCollectionPlaneButton_ActionPerformed

   private void useCollectionPlaneButtonActionPerformed(java.awt.event.ActionEvent evt) {
      //GEN-FIRST:event_useCollectionPlaneButton_ActionPerformed
      acquisitionSettingsChanged();
   } //GEN-LAST:event_useCollectionPlaneButton_ActionPerformed

   private void button3DActionPerformed(java.awt.event.ActionEvent evt) {
      //GEN-FIRST:event_button3D_ActionPerformed
      CardLayout card1 = (CardLayout) controls2DOr3D_.getLayout();
      card1.show(controls2DOr3D_, "3D");
      acquisitionSettingsChanged();
   } //GEN-LAST:event_button3D_ActionPerformed

   private void button2DActionPerformed(java.awt.event.ActionEvent evt) {
      //GEN-FIRST:event_button2D_ActionPerformed
      CardLayout card1 = (CardLayout) controls2DOr3D_.getLayout();
      card1.show(controls2DOr3D_, "2D");
      acquisitionSettingsChanged();
   } //GEN-LAST:event_button2D_ActionPerformed

   private void cuboidVolumeButtonActionPerformed(java.awt.event.ActionEvent evt) {
      //GEN-FIRST:event_cuboidVolumeButton_ActionPerformed
      CardLayout card1 = (CardLayout) acq3DSubtypePanel_.getLayout();
      card1.show(acq3DSubtypePanel_, "cuboid");
      acquisitionSettingsChanged();
   } //GEN-LAST:event_cuboidVolumeButton_ActionPerformed

   private void volumeBetweenSurfacesButtonActionPerformed(java.awt.event.ActionEvent evt) {
      //GEN-FIRST:event_volumeBetweenSurfacesButton_ActionPerformed
      CardLayout card1 = (CardLayout) acq3DSubtypePanel_.getLayout();
      card1.show(acq3DSubtypePanel_, "volumeBetween");
      acquisitionSettingsChanged();
   } //GEN-LAST:event_volumeBetweenSurfacesButton_ActionPerformed

   private void withinDistanceFromSurfacesButtonActionPerformed(java.awt.event.ActionEvent evt) {
      //GEN-FIRST:event_withinDistanceFromSurfacesButton_ActionPerformed
      CardLayout card1 = (CardLayout) acq3DSubtypePanel_.getLayout();
      card1.show(acq3DSubtypePanel_, "fixedDistance");
      acquisitionSettingsChanged();
   } //GEN-LAST:event_withinDistanceFromSurfacesButton_ActionPerformed

   private void exploreAcqTabbedPaneStateChanged(ChangeEvent evt) {
      //GEN-FIRST:event_exploreAcqTabbedPane_StateChanged
      refreshBoldedText();
   } //GEN-LAST:event_exploreAcqTabbedPane_StateChanged

   private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
      //GEN-FIRST:event_jButton1ActionPerformed
      multiAcqManager_.getAcquisitionSettings(multiAcqSelectedIndex_).channels_.setUseOnAll(
              !multiAcqManager_.getAcquisitionSettings(multiAcqSelectedIndex_).channels_
                    .getChannelListSetting(0).use_);
      ((SimpleChannelTableModel) channelsTable_.getModel()).fireTableDataChanged();
   } //GEN-LAST:event_jButton1ActionPerformed

   private void syncExposuresButtonActionPerformed(java.awt.event.ActionEvent evt) {
      //GEN-FIRST:event_syncExposuresButton_ActionPerformed
      multiAcqManager_.getAcquisitionSettings(multiAcqSelectedIndex_).channels_
            .synchronizeExposures();
      ((SimpleChannelTableModel) channelsTable_.getModel()).fireTableDataChanged();
   } //GEN-LAST:event_syncExposuresButton_ActionPerformed

   private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {
      //GEN-FIRST:event_jButton2ActionPerformed
      int[] rows = surfacesAndGridsTable_.getSelectedRows();
      if (rows.length > 0) {
         for (int index : rows) {
            SurfaceGridManager.getInstance().getSurfaceOrGrid(index).exportToMicroManager();
         }
      }
   } //GEN-LAST:event_jButton2ActionPerformed

   private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {
      //GEN-FIRST:event_jButton3ActionPerformed
      for (int index = 0; index < SurfaceGridManager.getInstance().getNumberOfSurfaces()
            + SurfaceGridManager.getInstance().getNumberOfGrids(); index++) {
         SurfaceGridManager.getInstance().getSurfaceOrGrid(index).exportToMicroManager();
      }
   } //GEN-LAST:event_jButton3ActionPerformed

   private void addAcqButtonActionPerformed(java.awt.event.ActionEvent evt) {
      //GEN-FIRST:event_addAcqButton_ActionPerformed
      multiAcqManager_.addNew();
      acquisitionSettingsChanged();
   } //GEN-LAST:event_addAcqButton_ActionPerformed

   private void removeAcqButtonActionPerformed(java.awt.event.ActionEvent evt) {
      //GEN-FIRST:event_removeAcqButton_ActionPerformed
      multiAcqManager_.remove(multipleAcqTable_.getSelectedRow());
      if (multiAcqSelectedIndex_ == multiAcqManager_.getNumberOfAcquisitions()) {
         multiAcqSelectedIndex_--;
         multipleAcqTable_.getSelectionModel().setSelectionInterval(multiAcqSelectedIndex_,
               multiAcqSelectedIndex_);
      }
      acquisitionSettingsChanged();
   }

   private void tileOverlapSpinnerStateChanged(ChangeEvent evt) {
      SurfaceGridManager.getInstance().updateAll();
   }

   // Variables declaration - do not modify//GEN-BEGIN:variables
   private JComboBox<String> channelGroupCombo;
   private JPanel channelsTab;
   private ButtonGroup acq2D3DButtonGroup_;
   private JPanel acq3DSubtypePanel_;
   private JComboBox<String> acqOrderCombo_;
   private JLabel acqOrderLabel_;
   private JPanel acqPanel;
   private JTabbedPane acqTabbedPane_;
   private JButton addAcqButton_;
   private JPanel bottomPanel_;
   private JComboBox<String> bottomSurfaceCombo_;
   private JLabel bottomSurfaceLabel_;
   private JLabel bugReportLink_;
   private JRadioButton button2D_;
   private JRadioButton button3D_;
   private JLabel channelGroupLabel_;
   private JTable channelsTable_;
   private JLabel citeLink_;
   private JComboBox<String> collectionPlaneCombo_;
   private JLabel collectionPlaneLabel_;
   private JPanel controls2DOr3D_;
   private JRadioButton cuboidVolumeButton_;
   private JButton deleteAllRegionsButton_;
   private JButton deleteSelectedRegionButton_;
   private JSpinner distanceAboveFixedSurfaceSpinner_;
   private JLabel distanceAboveSurfaceLabel_;
   private JSpinner distanceBelowFixedSurfaceSpinner_;
   private JLabel distanceBelowSurfaceLabel_;
   private JLabel estDurationLabel_;
   private JLabel estSizeLabel_;
   private JTabbedPane exploreAcqTabbedPane_;
   private JButton exploreBrowseButton_;
   private JComboBox exploreChannelGroupCombo_;
   private JPanel explorePanel;
   private JLabel exploreSavingDirLabel_;
   private JLabel exploreSavingNameLabel_;
   private JTextField exploreSavingNameTextField_;
   private JCheckBox exploreUseZCheckBox_;
   private JLabel exploreZStepLabel_;
   private JSpinner exploreZStepSpinner_;
   private JComboBox fixedDistanceSurfaceComboBox_;
   private JPanel fixedDistanceZPanel_;
   private JLabel fixedSurfaceLabel_;
   private JLabel footprin2DLabel_;
   private JLabel freeDiskSpaceLabel_;
   private JTextField globalSavingDirTextField_;
   private JButton jButton1;
   private JButton jButton2;
   private JButton jButton3;
   private JLabel jLabel3;
   private JPanel jPanel1;
   private JPanel jPanel2;
   private JPanel jPanel3;
   private JScrollPane jScrollPane1;
   private JScrollPane jScrollPane2;
   private JLabel labelDiagram2DSurface_;
   private JLabel labelDiagram2dSimple_;
   private JLabel labelDiagram3d2Surface_;
   private JLabel labelDiagram3dSimple_;
   private JLabel labelDiagram3dSurface_;
   private JButton moveAcqDownButton_;
   private JButton moveAcqUpButton_;
   private JScrollPane multipleAcqScrollPane_;
   private JTable multipleAcqTable_;
   private JButton newExploreWindowButton_;
   private JRadioButton noCollectionPlaneButton_;
   private JLabel numTimePointsLabel_;
   private JSpinner numTimePointsSpinner_;
   private JButton openDatasetButton_;
   private JLabel overlapLabel_;
   private JPanel panel2D_;
   private JPanel panel2dControlsSpecific_;
   private JPanel panel3DControlsSpecific_;
   private JLabel percentLabel_;
   private JButton removeAcqButton_;
   private JPanel rootPanel_;
   private JButton runAcqButton_;
   private JPanel runAcqPanel_;
   private JButton setCurrentZEndButton_;
   private JButton setCurrentZStartButton_;
   private JPanel simpleZPanel_;
   private JPanel spaceTab_;
   private JPanel surfaceAndGridsPanel_;
   private JLabel surfacesAndGrdisLabel_;
   private JTable surfacesAndGridsTable_;
   private JButton syncExposuresButton_;
   private JSpinner tileOverlapSpinner_;
   private JLabel timeIntervalLabel_;
   private JSpinner timeIntervalSpinner_;
   private JComboBox timeIntevalUnitCombo_;
   private JCheckBox timePointsCheckBox_;
   private JPanel timePointsPanel_;
   private JPanel timePointsTab_;
   private JComboBox topSurfaceCombo_;
   private JLabel topSurfaceLabel_;
   private JLabel umAboveLabel_;
   private JSpinner umAboveTopSurfaceSpinner_;
   private JLabel umAboveVolBetweenLabel_;
   private JSpinner umBelowBottomSurfaceSpinner_;
   private JLabel umBelowLabel_;
   private JLabel umBelowVolBetweenLabel_;
   private JRadioButton useCollectionPlaneButton_;
   private JLabel userGuideLink_;
   private JRadioButton volumeBetweenSurfacesButton_;
   private JPanel volumeBetweenZPanel_;
   private JRadioButton withinDistanceFromSurfacesButton_;
   private JComboBox xyFootprintComboBox_;
   private ButtonGroup z2DButtonGroup_;
   private JLabel zEndLabel;
   private JSpinner zEndSpinner_;
   private ButtonGroup zStackModeButtonGroup_;
   private JLabel zStartLabel;
   private JSpinner zStartSpinner_;
   private JLabel zStepLabel_;
   private JSpinner zStepSpinner_;

   // End of variables declaration//GEN-END:variables

}
